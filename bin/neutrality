#!/usr/bin/sbcl --script
;;; -*- common-lisp -*-
;;; neutral.lisp --- test sorters for neutrality across representations
(load "~/.sbclrc" :if-does-not-exist nil)
(require 'software-evolution)
(in-package :software-evolution)

;;; Reproducibility
(let ((seed-path "seed"))
  (if (probe-file seed-path)
      (setf *random-state* (with-open-file (in seed-path) (read in)))
      (progn
        (setf *random-state* (make-random-state t))
        (with-open-file (out seed-path :direction :output)
          (write *random-state* :stream out)))))

;;; Program evaluation
(defvar *test*
  (format nil "~a"
          (make-pathname
           :directory (pathname-directory (pathname *load-truename*))
           :name "test"
           :type "sh")))
(defvar *num-tests* 10)

(defun run-test (phenome num)
  (multiple-value-bind (output err-output exit)
      (shell "~a ~a ~a" *test* phenome num)
    (declare (ignorable output err-output))
    (zerop exit)))

(def-memoized-function test-suite (ast)
  (with-temp-file (bin)
    (if (phenome ast :bin bin)
        (count t (loop :for num :below *num-tests* :collect (run-test bin num)))
        0)))

(defun neutrality (path &key (runs 20))
  "Test the neutrality of the assembly program at PATH."
  (let* ((pathname (pathname path))
         (orig (from-file (make-instance 'asm) pathname))
         (store (make-pathname
                 :directory (pathname-directory pathname)
                 :name (pathname-name pathname)
                 :type "store")))
    ;; sanity
    (assert (= *num-tests* (test-suite orig)) (orig)
            "Sanity check on the fitness of the original program")
    ;; run
    (format t "~&~a ~S~%"
            path
            (/ (count-if (lambda (it) (= (fitness it) *num-tests*))
                         (store (repeatedly runs
                                  (let ((new (mutate (copy orig))))
                                    (setf (fitness new) (test-suite new))
                                    new))
                                store))
               runs))
    
    store))

;;; Run
(let ((files (cdr sb-ext:*posix-argv*)))
  (pmapcar #'neutrality files))
