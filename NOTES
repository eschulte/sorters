# -*- org -*-
#+Title: Sorting in different algorithms and languages
#+Author: Eric Schulte

* Compilation
| c   | gcc -S <asm> <src>    |
| cpp | g++ -S <asm> <src>    |
| hs  | ghc -S <asm> <src>    |
| ml  | ocamlc -o             |
| fs  | see [[http://concatenative.org/wiki/view/Factor/Deployment][Factor/Deployment]] |

This [[http://factor-language.blogspot.com/2010/05/comparing-factors-performance-against.html][blog post]] has some information on compiling executable from sbcl
and factor.

** asm
#+begin_src sh
  #!/bin/bash
  TMP=`echo $3|sed 's/\(.*\)\..*/\1/'`
  as -o $TMP.o $3 && \
      ld $TMP.o -o $2 && \
      rm -f $TMP.o
#+end_src

** ocaml
good discussion of Ocaml types with lots of example assembly
http://www.ocaml-tutorial.org/performance_and_profiling

1) first generate the required .s and startup files
   : ocamlopt -dstartup -S bubble.ml
2) then find out what flags ocamlopt is passing to gcc
   : ocamlopt -verbose -o bub1 bubble.ml
3) call gcc on the startup and .s file, as well as the ocaml libraries
   copied from the verbose output of ocamlopt -verbose, e.g. 
   : gcc -o bub '-L/usr/lib/ocaml' 'a.out.startup.s' '/usr/lib/ocaml/std_exit.o' 'bubble.s' '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl

#+begin_src sh :shebang=#!/bin/bash :tangle fake-gcc
  gcc -o $2 '-L/usr/lib/ocaml' '/home/eschulte/research/epr/asm/sorters/sort-rb/src/insertion-ml.startup.s' '/usr/lib/ocaml/std_exit.o' $3 '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl
#+end_src

** sbcl
This recipe works, although I'm not sure it counts as an executable
1) compile the lisp file into a .core file
   : sbcl --userinit /dev/null --load bubble.sbcl_compile
2) run the core file
   : sbcl --dynamic-space-size 500 --noinform --core bubble.core --userinit /dev/null --load bubble.sbcl_run

#+begin_src lisp
  (handler-bind
   ((sb-ext:defconstant-uneql (lambda (c) (abort c))))
   (load (compile-file "nbody.sbcl" )))
  (save-lisp-and-die "nbody.core" :purify t)
#+end_src
#+begin_src sh
  ln -s ~/perf/shootout/bench/nbody/nbody.sbcl .
  
  cat > nbody.sbcl_compile <<EOF
  (proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
  (handler-bind ((sb-ext:defconstant-uneql (lambda (c) (abort c))))
    (load (compile-file "nbody.sbcl" )))
  (save-lisp-and-die "nbody.core" :purify t)
  EOF
  
  sbcl --userinit /dev/null --load nbody.sbcl_compile
  
  cat > nbody.sbcl_run <<EOF
  (proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
  (main) (quit)
  EOF
  
  time sbcl --dynamic-space-size 500 --noinform --core nbody.core --userinit /dev/null --load nbody.sbcl_run 1000000
#+end_src
** racket
http://docs.racket-lang.org/raco/exe.html

can be done with some subset of the racket executable
: raco exe bubble.rkt

** lua -- can be done through C
http://stackoverflow.com/questions/194520/creating-standalone-lua-executables
: luac script.lua -o script.luac
: bin2c script.luac > code.c
* Tasks [1/2]
** DONE Analyze unreliable results
*** Table
1. parse data from raw results
   #+name: unreliable-sorters
   #+begin_src sh :dir results/unreliable/ :cache yes
     MEAN_CMD='{
       for (i=1; i<=NF; i++)
       {
           if($i ~ /[0-9.]/){sum[i] += $i; count[i]++}
           if(i == 1){ line = sum[i]/count[i] }else{ line = line " " sum[i]/count[i]}
       }
       print line
     }'
     ZERO_CMD='{zeros=0; for(i=1;i<=NF; i++){if($i == 0){zeros++;}}; print (zeros * 10);}'
     WRONG_CMD='{wrongs=0; for(i=1;i<=NF; i++){if($i > 0){wrongs++;}}; print (wrongs * 10);}'
     ERROR_CMD='{errors=0; for(i=1;i<=NF; i++){if($i < 0){errors++;}}; print (errors * 10);}'

     GRADATIONS=(0 0.001 0.0025 0.005 0.0075 0.01 0.025 0.05 0.075 0.1 0.25 0.5 0.75 1)

     echo -ne "\t\t\t"
     for ur in ${GRADATIONS[@]};do
         echo -ne "$ur%\t\t\t"
     done
     echo ""
     echo -ne "alg\tflag\tcmps"
     for ur in ${GRADATIONS[@]};do
         echo -ne "\tcorrect\twrong\terror"
     done
     echo ""
     for alg in bubble insertion merge quick;do
         for flag in Os O0 O1 O2 O3 Ofast;do
             ASM=_${alg}_c_gcc_${flag}.s
             COUNT=$(grep -c $'^\tcmp' $ASM)
             echo -ne "$alg\t$flag\t$COUNT"
             for ur in ${GRADATIONS[@]};do
                 TEST=_${alg}_c_gcc_${flag}_ur_${ur}.test
                 CORRECT=$(tail -100 $TEST|awk "$ZERO_CMD"|awk "$MEAN_CMD"|tail -1)
                 echo -ne "\t$CORRECT%"
                 WRONG=$(tail -100 $TEST|awk "$WRONG_CMD"|awk "$MEAN_CMD"|tail -1)
                 echo -ne "\t$WRONG%"
                 ERROR=$(tail -100 $TEST|awk "$ERROR_CMD"|awk "$MEAN_CMD"|tail -1)
                 echo -ne "\t$ERROR%"
             done
             echo ""
         done
     done
   #+end_src

   #+Caption: Average correct and failed sorting runs by % unreliable assembler comparisons.
   #+RESULTS[4197bff13c514cb8508a57e15f56238a89dd3342]: unreliable-sorters
   |           |       |      |      0% |       |       |  0.001% |       |       | 0.0025% |       |       |  0.005% |       |       | 0.0075% |       |       |   0.01% |       |       |  0.025% |       |       |   0.05% |       |       |  0.075% |       |       |    0.1% |        |       |   0.25% |        |        |    0.5% |        |        |   0.75% |        |        |      1% |       |       |
   | alg       | flag  | cmps | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct |  wrong | error | correct |  wrong |  error | correct |  wrong |  error | correct |  wrong |  error | correct | wrong | error |
   | bubble    | Os    |    4 |   94.5% |  0.5% |    0% |     82% |   13% |  0.2% |   77.7% | 17.4% |  0.3% |   69.8% | 25.5% |  0.3% |   65.3% | 29.4% |    1% |   60.8% | 34.1% |  0.6% |   45.4% | 48.7% |  1.7% |   34.7% | 55.9% |  5.4% |   28.2% | 60.8% |  7.3% |   24.8% |  61.6% |   10% |   17.2% |  56.7% |  23.1% |    8.7% |  40.8% |  47.6% |    1.5% |  22.3% |    74% |      0% |    0% |   98% |
   | bubble    | O0    |    5 |   94.3% |  0.7% |    0% |   81.1% | 14.2% |    0% |   75.2% | 20.4% |    0% |     65% | 30.4% |    0% |   59.5% |   36% |    0% |   55.1% | 40.6% |    0% |   38.4% | 57.6% |    0% |     29% | 67.2% |    0% |   24.4% | 71.9% |    0% |   23.2% |  73.1% |    0% |   13.5% |  82.7% |     0% |    5.5% |  90.7% |     0% |    1.1% |  95.2% |     0% |      0% | 96.3% |    0% |
   | bubble    | O1    |    5 |   94.9% |  0.1% |    0% |   90.2% |  3.8% |  1.1% |   85.7% |  6.6% |  3.1% |   79.4% |  9.8% |  6.2% |   76.6% | 10.1% |  8.9% |   72.2% | 11.8% | 11.8% |   57.4% | 16.8% | 22.5% |   44.9% | 17.7% |   34% |   36.7% | 16.1% | 44.1% |   30.3% |  15.7% |   51% |   16.5% |   6.3% |  75.1% |    5.2% |   1.9% |  90.9% |    1.8% |   0.6% |  95.6% |      0% |    0% |   98% |
   | bubble    | O2    |    5 |   94.9% |  0.1% |    0% |   90.3% |  3.6% |  1.1% |   84.5% |  6.8% |  3.8% |   78.9% |  9.3% |  7.2% |     75% | 11.2% |  9.5% |   72.2% | 11.8% | 11.8% |   60.5% |   15% | 21.1% |   44.9% | 17.5% | 34.2% |   37.5% | 17.8% | 41.7% |     30% |  16.3% | 51.1% |   17.1% |   6.6% |  74.1% |    5.3% |   1.7% |    91% |      2% |   0.3% |  95.7% |      0% |    0% |   98% |
   | bubble    | O3    |    5 |   94.9% |  0.1% |    0% |   89.8% |  3.8% |  1.7% |   83.7% |  7.4% |    4% |   78.9% |  9.1% |  7.3% |     76% | 11.3% |  8.4% |   73.2% | 11.3% | 11.4% |   58.1% | 14.5% | 23.7% |   43.6% | 18.4% | 35.1% |   34.8% | 16.2% | 45.9% |   29.9% |  15.4% | 51.9% |   17.2% |   5.8% |    75% |    5.9% |   1.8% |  90.1% |    1.5% |   0.1% |  96.4% |      0% |    0% |   98% |
   | bubble    | Ofast |    5 |   94.9% |  0.1% |    0% |   90.7% |  3.4% |  1.1% |   85.4% |  6.4% |  3.4% |   78.6% | 10.5% |  6.9% |   74.7% |  9.1% | 11.7% |   72.6% | 10.4% | 12.4% |   57.5% | 15.2% | 23.6% |   44.1% |   18% | 34.4% |   35.4% | 15.4% | 46.3% |   32.2% |  15.5% | 49.6% |     18% |   7.6% |  72.2% |    5.8% |   1.1% |    91% |    2.3% |   0.4% |  95.3% |      0% |    0% |   98% |
   | insertion | Os    |    4 |     95% |    0% |    0% |     94% |  0.9% |  0.1% |   91.9% |  2.8% |  0.3% |   88.9% |  5.8% |  0.3% |     88% |    6% |    1% |   86.7% |  6.7% |  1.7% |   75.6% | 17.5% |  1.9% |   65.3% | 25.3% |    5% |   58.1% | 29.9% |  7.7% |   50.1% |  36.6% |  9.6% |   26.1% |  45.7% |    25% |    6.2% |  43.1% |  47.9% |    0.7% |  21.3% |  75.6% |      0% |    0% |   98% |
   | insertion | O0    |    5 |   94.6% |  0.3% |  0.1% |   80.8% |  8.1% |  6.5% |   74.4% | 10.3% | 10.6% |   65.5% | 18.4% |   12% |   62.1% | 20.8% | 13.5% |   55.8% | 19.6% | 20.9% |   38.1% | 22.6% | 36.5% |   28.7% | 21.5% | 46.9% |   25.1% |   18% | 54.2% |     21% |  18.7% | 57.7% |   12.9% |  20.9% |  63.9% |    4.3% |  12.8% |  80.7% |    0.4% |   9.1% |  88.3% |      0% |    0% |   98% |
   | insertion | O1    |    7 |   94.5% |  0.5% |    0% |   83.5% | 11.5% |  0.2% |   80.5% | 14.5% |  0.2% |   76.2% | 18.5% |  0.7% |   71.3% | 23.6% |  0.7% |   70.5% | 23.8% |  1.3% |     54% | 37.2% |  4.9% |   40.2% | 46.7% |  9.3% |     33% | 48.2% | 15.1% |   27.9% |  50.5% | 18.6% |   16.4% |  38.3% |  42.7% |    8.1% |  16.9% |  72.6% |    1.7% |   4.3% |  91.9% |      0% |    0% |   98% |
   | insertion | O2    |    8 |   94.6% |  0.4% |    0% |   85.3% |   10% |  0.1% |   81.6% | 12.8% |  0.9% |   78.1% | 16.3% |  1.1% |   70.6% | 21.8% |  3.2% |   70.2% | 22.7% |  2.6% |   55.3% | 34.2% |  6.3% |     43% |   37% | 16.2% |   37.9% | 39.3% | 19.3% |   30.9% |  40.1% | 25.7% |   12.4% |  26.5% |  58.7% |    2.9% |   8.2% |  86.9% |    0.4% |   0.7% |  96.9% |      0% |    0% |   98% |
   | insertion | O3    |    8 |   94.8% |  0.2% |    0% |   83.6% | 11.4% |  0.2% |   80.7% | 13.7% |    1% |   76.6% | 17.3% |  1.4% |   72.5% | 21.4% |  1.8% |   69.5% | 23.2% |  2.9% |   56.5% | 31.6% |  7.6% |   45.5% | 36.2% | 14.6% |   35.3% | 41.3% | 20.1% |   30.9% |  39.1% | 26.8% |   15.4% |  26.8% |  55.2% |    4.2% |   8.8% |  84.8% |    0.5% |   0.9% |  96.6% |      0% |    0% |   98% |
   | insertion | Ofast |    8 |   94.8% |  0.2% |    0% |   84.9% |   10% |  0.3% |   80.8% | 13.4% |  1.1% |   74.8% |   19% |  1.5% |   72.5% |   21% |  2.1% |   71.6% | 21.8% |  2.2% |     56% | 32.9% |  7.2% |   42.9% |   39% | 14.2% |   35.8% | 38.5% | 22.1% |   31.2% |  40.2% | 25.3% |   13.1% |  26.6% |  57.8% |    5.2% |   8.6% |  84.2% |    0.3% |   0.9% |  96.8% |      0% |    0% |   98% |
   | merge     | Os    |    7 |   94.9% |  0.1% |    0% |   91.8% |    3% |  0.2% |   48.5% |  6.2% |  2.3% |   23.8% | 12.6% |  8.4% |   31.8% | 16.3% |  8.9% |   36.9% | 16.7% |  8.3% |   17.8% | 39.3% | 30.4% |      0% |   58% |   52% |      0% | 84.1% | 75.4% |      0% |    87% |   78% |      0% |   145% |   130% |      0% | 165.3% | 148.2% |      0% | 113.1% | 101.4% |      0% |    0% |   98% |
   | merge     | O0    |    7 |   94.6% |  0.4% |    0% |     85% | 10.1% |    0% |   77.2% | 18.1% |    0% |   67.5% |   28% |    0% |     60% | 35.6% |    0% |   56.2% | 39.8% |    0% |     36% | 59.8% |    0% |   26.9% | 69.3% |    0% |   24.2% | 71.9% |    0% |   20.1% |  76.2% |    0% |   12.4% |  83.9% |     0% |    4.7% |  82.3% |   9.4% |    1.1% |   6.5% |  90.3% |      0% |    0% |   98% |
   | merge     | O1    |    8 |   94.9% |  0.1% |    0% |   69.9% |  2.7% |  0.2% |   86.1% |  8.6% |  0.6% |    8.3% | 12.3% | 10.8% |    9.3% | 13.7% | 10.6% |   12.6% | 14.6% | 11.9% |    4.3% | 44.9% | 39.7% |      0% | 72.5% |   65% |      0% | 84.1% | 75.4% |      0% |  81.2% | 72.8% |      0% | 153.7% | 137.8% |      0% | 156.6% | 140.4% |    0.1% |   0.1% |  88.8% |      0% |    0% |   98% |
   | merge     | O2    |    9 |   94.8% |  0.2% |    0% |   90.4% |  4.4% |  0.2% |   64.9% |    7% |  0.9% |   43.9% | 11.4% |  6.4% |     45% |    8% |  1.1% |   57.7% | 14.3% |  2.2% |   47.7% | 29.7% | 14.9% |      0% | 81.2% | 72.8% |      0% | 78.3% | 70.2% |      0% | 104.4% | 93.6% |      0% | 147.9% | 132.6% |      0% | 150.8% | 135.2% |    0.4% |     3% |  82.2% |      0% |    0% |   98% |
   | merge     | O3    |  194 |     95% |    0% |    0% |   69.6% |  2.9% |  0.2% |   26.1% | 11.4% |  8.2% |   56.6% | 17.1% |  9.4% |   25.5% | 13.7% |  8.6% |   36.9% | 19.4% | 10.8% |     36% | 25.3% | 12.1% |      0% | 46.4% | 41.6% |      0% | 84.1% | 75.4% |      0% |  89.9% | 80.6% |      0% | 165.3% | 148.2% |      0% | 191.4% | 171.6% |      0% | 101.5% |    91% |      0% |    0% |   98% |
   | merge     | Ofast |  194 |     95% |    0% |    0% |   69.5% |  2.8% |  0.1% |   85.8% |  8.4% |  0.8% |   54.3% |   12% |  4.3% |   43.6% | 12.8% |  5.7% |   25.3% | 19.7% | 12.5% |      0% | 46.4% | 41.6% |      0% | 52.2% | 46.8% |      0% | 75.4% | 67.6% |      0% |  98.6% | 88.4% |      0% | 162.4% | 145.6% |      0% | 194.3% | 174.2% |      0% | 113.1% | 101.4% |      0% |    0% |   98% |
   | quick     | Os    |    7 |     95% |    0% |    0% |   91.5% |  3.5% |    0% |   86.4% |  8.5% |  0.1% |   81.6% | 12.7% |  0.7% |   79.4% |   15% |  0.8% |   78.3% | 16.1% |  0.8% |   67.7% | 26.2% |  1.6% |   54.4% | 35.9% |  5.1% |     47% | 40.7% |  8.1% |   40.7% |    47% |  8.4% |   20.4% |  45.6% |  31.1% |    6.6% |   9.7% |  81.5% |    0.1% |   1.7% |  96.2% |      0% |    0% |   98% |
   | quick     | O0    |    7 |   94.9% |  0.1% |    0% |   88.8% |  6.3% |    0% |     84% | 11.1% |    0% |   76.5% | 18.7% |    0% |     73% | 22.3% |    0% |   69.1% | 26.3% |    0% |   53.1% | 42.6% |    0% |   37.9% | 58.2% |    0% |   30.5% | 65.6% |    0% |   25.4% |  70.8% |    0% |   14.4% |  72.3% |   9.7% |    6.4% |  38.5% |  52.5% |    0.4% |   7.4% |    90% |      0% |    0% |   98% |
   | quick     | O1    |    9 |     95% |    0% |    0% |   90.6% |    4% |  0.4% |   86.9% |  7.5% |  0.6% |   82.9% | 11.9% |  0.3% |   78.8% | 14.8% |  1.5% |   77.7% | 15.9% |  1.6% |   65.3% | 25.5% |  4.7% |   53.5% | 34.1% |    8% |   44.7% | 38.8% | 12.9% |   37.4% |  39.9% |   19% |   16.6% |  33.4% |  47.4% |    3.9% |   2.7% |  91.3% |    0.3% |     0% |  97.7% |      0% |    0% |   98% |
   | quick     | O2    |   10 |   94.8% |  0.2% |    0% |   91.3% |  3.5% |  0.2% |   86.2% |  8.4% |  0.5% |   82.6% | 11.8% |  0.7% |   78.6% | 15.3% |  1.4% |     76% | 17.5% |  1.7% |   67.5% | 24.7% |  3.3% |   53.6% | 33.6% |  9.2% |   45.1% | 40.1% | 11.3% |   37.3% |  38.4% | 20.3% |   19.2% |  30.9% |    47% |    6.6% |  15.8% |  75.2% |    2.7% |   3.1% |  92.2% |      0% |    0% |   98% |
   | quick     | O3    |   70 |   94.7% |  0.3% |    0% |   90.2% |  4.7% |  0.1% |   86.8% |  7.6% |  0.6% |     82% | 11.9% |  1.2% |   80.2% | 13.5% |  1.4% |     76% | 17.3% |  1.9% |   66.1% | 25.3% |  4.1% |   53.4% | 33.9% |  8.7% |   44.4% | 36.4% | 15.5% |   36.8% |    40% | 19.6% |   16.6% |  33.9% |  46.7% |    5.5% |   9.4% |  82.9% |    1.3% |   3.2% |  93.5% |      0% |    0% |   98% |
   | quick     | Ofast |   70 |     95% |    0% |    0% |   89.6% |    5% |  0.4% |   87.4% |    7% |  0.6% |   82.4% | 11.8% |    1% |     79% | 14.2% |    2% |   78.1% | 15.8% |  1.4% |   65.5% |   25% |  5.3% |   51.2% | 33.7% | 11.3% |   41.6% | 39.8% | 14.9% |   37.1% |    39% | 20.4% |   16.1% |  32.3% |  48.9% |    6.5% |  10.7% |  80.8% |    1.2% |   3.2% |  93.6% |      0% |    0% |   98% |

2. clean up data
   #+begin_src sh :var in=unreliable-sorters
   echo "$in"|tail -n+2|~/bin/transpose
   #+end_src

   #+RESULTS: plain
   | alg     | bubble-Os | bubble-O0 | bubble-O1 | bubble-O2 | bubble-O3 | bubble-Ofast | insertion-Os | insertion-O0 | insertion-O1 | insertion-O2 | insertion-O3 | insertion-Ofast | merge-Os | merge-O0 | merge-O1 | merge-O2 | merge-O3 | -Ofast  merge | quick-Os | quick-O0 | quick-O1 | quick-O2 | quick-O3 | quick-Ofast |
   | correct |     94.5% |     94.3% |     94.9% |     94.9% |     94.9% |        94.9% |          95% |        94.6% |        94.5% |        94.6% |        94.8% |           94.8% |    94.9% |    94.6% |    94.9% |    94.8% |      95% |           95% |      95% |    94.9% |      95% |    94.8% |    94.7% |         95% |
   | wrong   |      0.5% |      0.7% |      0.1% |      0.1% |      0.1% |         0.1% |           0% |         0.3% |         0.5% |         0.4% |         0.2% |            0.2% |     0.1% |     0.4% |     0.1% |     0.2% |       0% |            0% |       0% |     0.1% |       0% |     0.2% |     0.3% |          0% |
   | error   |        0% |        0% |        0% |        0% |        0% |           0% |           0% |         0.1% |           0% |           0% |           0% |              0% |       0% |       0% |       0% |       0% |       0% |            0% |       0% |       0% |       0% |       0% |       0% |          0% |
   | correct |       82% |     81.1% |     90.2% |     90.3% |     89.8% |        90.7% |          94% |        80.8% |        83.5% |        85.3% |        83.6% |           84.9% |    91.8% |      85% |    69.9% |    90.4% |    69.6% |         69.5% |    91.5% |    88.8% |    90.6% |    91.3% |    90.2% |       89.6% |
   | wrong   |       13% |     14.2% |      3.8% |      3.6% |      3.8% |         3.4% |         0.9% |         8.1% |        11.5% |          10% |        11.4% |             10% |       3% |    10.1% |     2.7% |     4.4% |     2.9% |          2.8% |     3.5% |     6.3% |       4% |     3.5% |     4.7% |          5% |
   | error   |      0.2% |        0% |      1.1% |      1.1% |      1.7% |         1.1% |         0.1% |         6.5% |         0.2% |         0.1% |         0.2% |            0.3% |     0.2% |       0% |     0.2% |     0.2% |     0.2% |          0.1% |       0% |       0% |     0.4% |     0.2% |     0.1% |        0.4% |
   | correct |     77.7% |     75.2% |     85.7% |     84.5% |     83.7% |        85.4% |        91.9% |        74.4% |        80.5% |        81.6% |        80.7% |           80.8% |    48.5% |    77.2% |    86.1% |    64.9% |    26.1% |         85.8% |    86.4% |      84% |    86.9% |    86.2% |    86.8% |       87.4% |
   | wrong   |     17.4% |     20.4% |      6.6% |      6.8% |      7.4% |         6.4% |         2.8% |        10.3% |        14.5% |        12.8% |        13.7% |           13.4% |     6.2% |    18.1% |     8.6% |       7% |    11.4% |          8.4% |     8.5% |    11.1% |     7.5% |     8.4% |     7.6% |          7% |
   | error   |      0.3% |        0% |      3.1% |      3.8% |        4% |         3.4% |         0.3% |        10.6% |         0.2% |         0.9% |           1% |            1.1% |     2.3% |       0% |     0.6% |     0.9% |     8.2% |          0.8% |     0.1% |       0% |     0.6% |     0.5% |     0.6% |        0.6% |
   | correct |     69.8% |       65% |     79.4% |     78.9% |     78.9% |        78.6% |        88.9% |        65.5% |        76.2% |        78.1% |        76.6% |           74.8% |    23.8% |    67.5% |     8.3% |    43.9% |    56.6% |         54.3% |    81.6% |    76.5% |    82.9% |    82.6% |      82% |       82.4% |
   | wrong   |     25.5% |     30.4% |      9.8% |      9.3% |      9.1% |        10.5% |         5.8% |        18.4% |        18.5% |        16.3% |        17.3% |             19% |    12.6% |      28% |    12.3% |    11.4% |    17.1% |           12% |    12.7% |    18.7% |    11.9% |    11.8% |    11.9% |       11.8% |
   | error   |      0.3% |        0% |      6.2% |      7.2% |      7.3% |         6.9% |         0.3% |          12% |         0.7% |         1.1% |         1.4% |            1.5% |     8.4% |       0% |    10.8% |     6.4% |     9.4% |          4.3% |     0.7% |       0% |     0.3% |     0.7% |     1.2% |          1% |
   | correct |     65.3% |     59.5% |     76.6% |       75% |       76% |        74.7% |          88% |        62.1% |        71.3% |        70.6% |        72.5% |           72.5% |    31.8% |      60% |     9.3% |      45% |    25.5% |         43.6% |    79.4% |      73% |    78.8% |    78.6% |    80.2% |         79% |
   | wrong   |     29.4% |       36% |     10.1% |     11.2% |     11.3% |         9.1% |           6% |        20.8% |        23.6% |        21.8% |        21.4% |             21% |    16.3% |    35.6% |    13.7% |       8% |    13.7% |         12.8% |      15% |    22.3% |    14.8% |    15.3% |    13.5% |       14.2% |
   | error   |        1% |        0% |      8.9% |      9.5% |      8.4% |        11.7% |           1% |        13.5% |         0.7% |         3.2% |         1.8% |            2.1% |     8.9% |       0% |    10.6% |     1.1% |     8.6% |          5.7% |     0.8% |       0% |     1.5% |     1.4% |     1.4% |          2% |
   | correct |     60.8% |     55.1% |     72.2% |     72.2% |     73.2% |        72.6% |        86.7% |        55.8% |        70.5% |        70.2% |        69.5% |           71.6% |    36.9% |    56.2% |    12.6% |    57.7% |    36.9% |         25.3% |    78.3% |    69.1% |    77.7% |      76% |      76% |       78.1% |
   | wrong   |     34.1% |     40.6% |     11.8% |     11.8% |     11.3% |        10.4% |         6.7% |        19.6% |        23.8% |        22.7% |        23.2% |           21.8% |    16.7% |    39.8% |    14.6% |    14.3% |    19.4% |         19.7% |    16.1% |    26.3% |    15.9% |    17.5% |    17.3% |       15.8% |
   | error   |      0.6% |        0% |     11.8% |     11.8% |     11.4% |        12.4% |         1.7% |        20.9% |         1.3% |         2.6% |         2.9% |            2.2% |     8.3% |       0% |    11.9% |     2.2% |    10.8% |         12.5% |     0.8% |       0% |     1.6% |     1.7% |     1.9% |        1.4% |
   | correct |     45.4% |     38.4% |     57.4% |     60.5% |     58.1% |        57.5% |        75.6% |        38.1% |          54% |        55.3% |        56.5% |             56% |    17.8% |      36% |     4.3% |    47.7% |      36% |            0% |    67.7% |    53.1% |    65.3% |    67.5% |    66.1% |       65.5% |
   | wrong   |     48.7% |     57.6% |     16.8% |       15% |     14.5% |        15.2% |        17.5% |        22.6% |        37.2% |        34.2% |        31.6% |           32.9% |    39.3% |    59.8% |    44.9% |    29.7% |    25.3% |         46.4% |    26.2% |    42.6% |    25.5% |    24.7% |    25.3% |         25% |
   | error   |      1.7% |        0% |     22.5% |     21.1% |     23.7% |        23.6% |         1.9% |        36.5% |         4.9% |         6.3% |         7.6% |            7.2% |    30.4% |       0% |    39.7% |    14.9% |    12.1% |         41.6% |     1.6% |       0% |     4.7% |     3.3% |     4.1% |        5.3% |
   | correct |     34.7% |       29% |     44.9% |     44.9% |     43.6% |        44.1% |        65.3% |        28.7% |        40.2% |          43% |        45.5% |           42.9% |       0% |    26.9% |       0% |       0% |       0% |            0% |    54.4% |    37.9% |    53.5% |    53.6% |    53.4% |       51.2% |
   | wrong   |     55.9% |     67.2% |     17.7% |     17.5% |     18.4% |          18% |        25.3% |        21.5% |        46.7% |          37% |        36.2% |             39% |      58% |    69.3% |    72.5% |    81.2% |    46.4% |         52.2% |    35.9% |    58.2% |    34.1% |    33.6% |    33.9% |       33.7% |
   | error   |      5.4% |        0% |       34% |     34.2% |     35.1% |        34.4% |           5% |        46.9% |         9.3% |        16.2% |        14.6% |           14.2% |      52% |       0% |      65% |    72.8% |    41.6% |         46.8% |     5.1% |       0% |       8% |     9.2% |     8.7% |       11.3% |
   | correct |     28.2% |     24.4% |     36.7% |     37.5% |     34.8% |        35.4% |        58.1% |        25.1% |          33% |        37.9% |        35.3% |           35.8% |       0% |    24.2% |       0% |       0% |       0% |            0% |      47% |    30.5% |    44.7% |    45.1% |    44.4% |       41.6% |
   | wrong   |     60.8% |     71.9% |     16.1% |     17.8% |     16.2% |        15.4% |        29.9% |          18% |        48.2% |        39.3% |        41.3% |           38.5% |    84.1% |    71.9% |    84.1% |    78.3% |    84.1% |         75.4% |    40.7% |    65.6% |    38.8% |    40.1% |    36.4% |       39.8% |
   | error   |      7.3% |        0% |     44.1% |     41.7% |     45.9% |        46.3% |         7.7% |        54.2% |        15.1% |        19.3% |        20.1% |           22.1% |    75.4% |       0% |    75.4% |    70.2% |    75.4% |         67.6% |     8.1% |       0% |    12.9% |    11.3% |    15.5% |       14.9% |
   | correct |     24.8% |     23.2% |     30.3% |       30% |     29.9% |        32.2% |        50.1% |          21% |        27.9% |        30.9% |        30.9% |           31.2% |       0% |    20.1% |       0% |       0% |       0% |            0% |    40.7% |    25.4% |    37.4% |    37.3% |    36.8% |       37.1% |
   | wrong   |     61.6% |     73.1% |     15.7% |     16.3% |     15.4% |        15.5% |        36.6% |        18.7% |        50.5% |        40.1% |        39.1% |           40.2% |      87% |    76.2% |    81.2% |   104.4% |    89.9% |         98.6% |      47% |    70.8% |    39.9% |    38.4% |      40% |         39% |
   | error   |       10% |        0% |       51% |     51.1% |     51.9% |        49.6% |         9.6% |        57.7% |        18.6% |        25.7% |        26.8% |           25.3% |      78% |       0% |    72.8% |    93.6% |    80.6% |         88.4% |     8.4% |       0% |      19% |    20.3% |    19.6% |       20.4% |
   | correct |     17.2% |     13.5% |     16.5% |     17.1% |     17.2% |          18% |        26.1% |        12.9% |        16.4% |        12.4% |        15.4% |           13.1% |       0% |    12.4% |       0% |       0% |       0% |            0% |    20.4% |    14.4% |    16.6% |    19.2% |    16.6% |       16.1% |
   | wrong   |     56.7% |     82.7% |      6.3% |      6.6% |      5.8% |         7.6% |        45.7% |        20.9% |        38.3% |        26.5% |        26.8% |           26.6% |     145% |    83.9% |   153.7% |   147.9% |   165.3% |        162.4% |    45.6% |    72.3% |    33.4% |    30.9% |    33.9% |       32.3% |
   | error   |     23.1% |        0% |     75.1% |     74.1% |       75% |        72.2% |          25% |        63.9% |        42.7% |        58.7% |        55.2% |           57.8% |     130% |       0% |   137.8% |   132.6% |   148.2% |        145.6% |    31.1% |     9.7% |    47.4% |      47% |    46.7% |       48.9% |
   | correct |      8.7% |      5.5% |      5.2% |      5.3% |      5.9% |         5.8% |         6.2% |         4.3% |         8.1% |         2.9% |         4.2% |            5.2% |       0% |     4.7% |       0% |       0% |       0% |            0% |     6.6% |     6.4% |     3.9% |     6.6% |     5.5% |        6.5% |
   | wrong   |     40.8% |     90.7% |      1.9% |      1.7% |      1.8% |         1.1% |        43.1% |        12.8% |        16.9% |         8.2% |         8.8% |            8.6% |   165.3% |    82.3% |   156.6% |   150.8% |   191.4% |        194.3% |     9.7% |    38.5% |     2.7% |    15.8% |     9.4% |       10.7% |
   | error   |     47.6% |        0% |     90.9% |       91% |     90.1% |          91% |        47.9% |        80.7% |        72.6% |        86.9% |        84.8% |           84.2% |   148.2% |     9.4% |   140.4% |   135.2% |   171.6% |        174.2% |    81.5% |    52.5% |    91.3% |    75.2% |    82.9% |       80.8% |
   | correct |      1.5% |      1.1% |      1.8% |        2% |      1.5% |         2.3% |         0.7% |         0.4% |         1.7% |         0.4% |         0.5% |            0.3% |       0% |     1.1% |     0.1% |     0.4% |       0% |            0% |     0.1% |     0.4% |     0.3% |     2.7% |     1.3% |        1.2% |
   | wrong   |     22.3% |     95.2% |      0.6% |      0.3% |      0.1% |         0.4% |        21.3% |         9.1% |         4.3% |         0.7% |         0.9% |            0.9% |   113.1% |     6.5% |     0.1% |       3% |   101.5% |        113.1% |     1.7% |     7.4% |       0% |     3.1% |     3.2% |        3.2% |
   | error   |       74% |        0% |     95.6% |     95.7% |     96.4% |        95.3% |        75.6% |        88.3% |        91.9% |        96.9% |        96.6% |           96.8% |   101.4% |    90.3% |    88.8% |    82.2% |      91% |        101.4% |    96.2% |      90% |    97.7% |    92.2% |    93.5% |       93.6% |
   | correct |        0% |        0% |        0% |        0% |        0% |           0% |           0% |           0% |           0% |           0% |           0% |              0% |       0% |       0% |       0% |       0% |       0% |            0% |       0% |       0% |       0% |       0% |       0% |          0% |
   | wrong   |        0% |     96.3% |        0% |        0% |        0% |           0% |           0% |           0% |           0% |           0% |           0% |              0% |       0% |       0% |       0% |       0% |       0% |            0% |       0% |       0% |       0% |       0% |       0% |          0% |
   | error   |       98% |        0% |       98% |       98% |       98% |          98% |          98% |          98% |          98% |          98% |          98% |             98% |      98% |      98% |      98% |      98% |      98% |           98% |      98% |      98% |      98% |      98% |      98% |         98% |

3. write to files for plotting
   #+begin_src bash :var in=plain :results silent
     GRADATIONS=(0 0.001 0.0025 0.005 0.0075 0.01 0.025 0.05 0.075 0.1 0.25 0.5 0.75 1)
     paste <(echo -e "perc\n${GRADATIONS[@]}"|tr ' ' '\n') <(echo "$in"|grep -i "correct\|alg") > /tmp/correct
     paste <(echo "${GRADATIONS[@]}"|tr ' ' '\n') <(echo "$in"|grep wrong) > /tmp/wrong
     paste <(echo "${GRADATIONS[@]}"|tr ' ' '\n') <(echo "$in"|grep error) > /tmp/error
   #+end_src

4. plot
   #+begin_src gnuplot :file results/unreliable-sorters.svg
     set term svg size 640,600 dynamic
     set title '% Correct Output of Sorting Programs Using Unreliable x86 cmp Operations'
     set ylabel '% correct output'
     set xlabel '% chance of correct results from cmp'
     set key above
     set key autotitle columnhead
     set logscale x
     set termoption dash
     do for [i=0:5] { set style line (i+2) lt i lc rgb "red" }
     do for [i=0:5] { set style line (i+8) lt i lc rgb "orange" }
     do for [i=0:5] { set style line (i+14) lt i lc rgb "blue" }
     do for [i=0:5] { set style line (i+20) lt i lc rgb "green" }
     plot for [i=2:7]   "/tmp/correct" u 1:i w lines linestyle i, \
     for [i=8:13]  "/tmp/correct" u 1:i w lines linestyle i, \
     for [i=14:19] "/tmp/correct" u 1:i w lines linestyle i, \
     for [i=20:25] "/tmp/correct" u 1:i w lines linestyle i;
   #+end_src

   #+RESULTS:
   [[file:results/unreliable-sorters.svg]]

*** TODO table fixes [3/5]
- [X] make percents
- [ ] include run cmps (broken out into reliable and un-reliable)
- [ ] graph
- [X] fail -> error
- [X] include "wrong"
- [ ] what's causing errors for non O0 optimization levels?
