# -*- org -*-
#+Title: Sorting in different algorithms and languages
#+Author: Eric Schulte

* Compilation
| c   | gcc -S <asm> <src>    |
| cpp | g++ -S <asm> <src>    |
| hs  | ghc -S <asm> <src>    |
| ml  | ocamlc -o             |
| fs  | see [[http://concatenative.org/wiki/view/Factor/Deployment][Factor/Deployment]] |

This [[http://factor-language.blogspot.com/2010/05/comparing-factors-performance-against.html][blog post]] has some information on compiling executable from sbcl
and factor.

** asm
#+begin_src sh
  #!/bin/bash
  TMP=`echo $3|sed 's/\(.*\)\..*/\1/'`
  as -o $TMP.o $3 && \
      ld $TMP.o -o $2 && \
      rm -f $TMP.o
#+end_src

** ocaml
good discussion of Ocaml types with lots of example assembly
http://www.ocaml-tutorial.org/performance_and_profiling

1) first generate the required .s and startup files
   : ocamlopt -dstartup -S bubble.ml
2) then find out what flags ocamlopt is passing to gcc
   : ocamlopt -verbose -o bub1 bubble.ml
3) call gcc on the startup and .s file, as well as the ocaml libraries
   copied from the verbose output of ocamlopt -verbose, e.g. 
   : gcc -o bub '-L/usr/lib/ocaml' 'a.out.startup.s' '/usr/lib/ocaml/std_exit.o' 'bubble.s' '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl

#+begin_src sh :shebang=#!/bin/bash :tangle fake-gcc
  gcc -o $2 '-L/usr/lib/ocaml' '/home/eschulte/research/epr/asm/sorters/sort-rb/src/insertion-ml.startup.s' '/usr/lib/ocaml/std_exit.o' $3 '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl
#+end_src

** sbcl
This recipe works, although I'm not sure it counts as an executable
1) compile the lisp file into a .core file
   : sbcl --userinit /dev/null --load bubble.sbcl_compile
2) run the core file
   : sbcl --dynamic-space-size 500 --noinform --core bubble.core --userinit /dev/null --load bubble.sbcl_run

#+begin_src lisp
  (handler-bind
   ((sb-ext:defconstant-uneql (lambda (c) (abort c))))
   (load (compile-file "nbody.sbcl" )))
  (save-lisp-and-die "nbody.core" :purify t)
#+end_src
#+begin_src sh
  ln -s ~/perf/shootout/bench/nbody/nbody.sbcl .
  
  cat > nbody.sbcl_compile <<EOF
  (proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
  (handler-bind ((sb-ext:defconstant-uneql (lambda (c) (abort c))))
    (load (compile-file "nbody.sbcl" )))
  (save-lisp-and-die "nbody.core" :purify t)
  EOF
  
  sbcl --userinit /dev/null --load nbody.sbcl_compile
  
  cat > nbody.sbcl_run <<EOF
  (proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
  (main) (quit)
  EOF
  
  time sbcl --dynamic-space-size 500 --noinform --core nbody.core --userinit /dev/null --load nbody.sbcl_run 1000000
#+end_src
** racket
http://docs.racket-lang.org/raco/exe.html

can be done with some subset of the racket executable
: raco exe bubble.rkt

** lua -- can be done through C
http://stackoverflow.com/questions/194520/creating-standalone-lua-executables
: luac script.lua -o script.luac
: bin2c script.luac > code.c
* Tasks [1/2]
** DONE Analyze unreliable results
*** Table
#+begin_src sh :dir results/unreliable/ :cache yes
  MEAN_CMD='{
    for (i=1; i<=NF; i++)
    {
        if($i ~ /[0-9.]/){sum[i] += $i; count[i]++}
        if(i == 1){ line = sum[i]/count[i] }else{ line = line " " sum[i]/count[i]}
    }
    print line
  }'
  ZERO_CMD='{zeros=0; for(i=1;i<NF; i++){if($i == 0){zeros++;}}; print (zeros * 10);}'
  WRONG_CMD='{wrongs=0; for(i=1;i<NF; i++){if($i > 0){wrongs++;}}; print (wrongs * 10);}'
  ERROR_CMD='{errors=0; for(i=1;i<NF; i++){if($i < 0){errors++;}}; print (errors * 10);}'
  
  GRADATIONS=(0 0.001 0.0025 0.005 0.0075 0.01 0.025 0.05 0.075 0.1 0.25 0.5 0.75 1)
  
  echo -ne "\t\t\t"
  for ur in ${GRADATIONS[@]};do
      echo -ne "$ur%\t\t\t"
  done
  echo ""
  echo -ne "alg\tflag\tcmps"
  for ur in ${GRADATIONS[@]};do
      echo -ne "\tcorrect\twrong\terror"
  done
  echo ""
  for alg in bubble insertion merge quick;do
      for flag in Os O0 O1 O2 O3 Ofast;do
          ASM=_${alg}_c_gcc_${flag}.s
          COUNT=$(grep -c $'^\tcmp' $ASM)
          echo -ne "$alg\t$flag\t$COUNT"
          for ur in ${GRADATIONS[@]};do
              TEST=_${alg}_c_gcc_${flag}_ur_${ur}.test
              CORRECT=$(head -100 $TEST|awk "$ZERO_CMD"|awk "$MEAN_CMD"|tail -1)
              echo -ne "\t$CORRECT%"
              WRONG=$(head -100 $TEST|awk "$WRONG_CMD"|awk "$MEAN_CMD"|tail -1)
              echo -ne "\t$WRONG%"
              ERROR=$(head -100 $TEST|awk "$ERROR_CMD"|awk "$MEAN_CMD"|tail -1)
              echo -ne "\t$ERROR%"
          done
          echo ""
      done
  done
#+end_src

#+Caption: Average correct and failed sorting runs by % unreliable assembler comparisons.
#+RESULTS[e33cee571b7f2c0255f8bb427651f15e43dc6737]:
|           |       |      |      0% |       |       |  0.001% |       |       | 0.0025% |       |       |  0.005% |       |       | 0.0075% |       |       |   0.01% |       |       |  0.025% |       |       |   0.05% |       |       |  0.075% |       |       |    0.1% |       |       |   0.25% |       |       |    0.5% |       |       |   0.75% |       |       |      1% |       |       |
| alg       | flag  | cmps | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error |
| bubble    | Os    |    4 |    7.3% | 16.2% | 66.5% |    8.5% | 18.8% | 62.7% |    7.4% | 15.3% | 67.3% |    9.2% | 18.1% | 62.7% |    7.6% |   17% | 65.4% |      9% | 16.9% | 64.1% |    8.3% |   16% | 65.7% |    7.4% | 16.7% | 65.9% |    7.7% | 18.6% | 63.7% |    6.4% | 16.9% | 66.7% |    5.1% | 15.8% | 69.1% |    3.7% | 23.1% | 63.2% |    1.9% | 25.3% | 62.8% |      2% | 27.8% | 60.2% |
| bubble    | O0    |    5 |     30% |   60% |    0% |   30.1% | 59.9% |    0% |   31.2% | 58.6% |  0.2% |   29.8% | 60.1% |  0.1% |   30.4% | 59.3% |  0.3% |   28.9% | 60.4% |  0.7% |   27.4% | 59.8% |  2.8% |   26.5% | 54.6% |  8.9% |   14.9% |   33% | 42.1% |   20.5% | 45.4% | 24.1% |   15.9% | 40.5% | 33.6% |    7.5% | 14.9% | 67.6% |      0% |  8.2% | 81.8% |      0% |   90% |    0% |
| bubble    | O1    |    5 |      0% |  7.2% | 82.8% |      0% |    6% |   84% |      0% |  7.1% | 82.9% |      0% |  6.7% | 83.3% |      0% |  6.8% | 83.2% |      0% |    7% |   83% |      0% |  7.9% | 82.1% |      0% |  7.8% | 82.2% |      0% |  7.4% | 82.6% |      0% |  8.6% | 81.4% |      0% | 10.8% | 79.2% |      0% | 20.1% | 69.9% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| bubble    | O2    |    5 |      0% |  7.2% | 82.8% |      0% |  7.5% | 82.5% |      0% |  7.8% | 82.2% |      0% |    7% |   83% |      0% |  7.1% | 82.9% |      0% |  7.2% | 82.8% |      0% |    8% |   82% |      0% |  7.6% | 82.4% |      0% |  9.1% | 80.9% |      0% |  7.2% | 82.8% |      0% | 10.8% | 79.2% |      0% | 15.1% | 74.9% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| bubble    | O3    |    5 |      0% |    7% |   83% |      0% |    7% |   83% |      0% |  7.3% | 82.7% |      0% |  7.8% | 82.2% |      0% |  6.2% | 83.8% |      0% |  6.5% | 83.5% |      0% |  8.4% | 81.6% |      0% |  7.5% | 82.5% |      0% |  9.5% | 80.5% |      0% |  9.3% | 80.7% |      0% | 11.6% | 78.4% |      0% |   18% |   72% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| bubble    | Ofast |    5 |      0% |  7.2% | 82.8% |      0% |  7.5% | 82.5% |      0% |  6.7% | 83.3% |      0% |  6.6% | 83.4% |      0% |  7.7% | 82.3% |      0% |  7.3% | 82.7% |      0% |  6.9% | 83.1% |      0% |  8.7% | 81.3% |      0% |  8.3% | 81.7% |      0% |  6.8% | 83.2% |      0% | 11.6% | 78.4% |      0% | 17.1% | 72.9% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| insertion | Os    |    4 |   13.9% | 29.9% | 46.2% |   14.9% | 31.5% | 43.6% |   14.3% | 28.9% | 46.8% |   14.2% | 30.4% | 45.4% |   14.9% | 29.3% | 45.8% |   15.7% | 32.5% | 41.8% |   14.8% | 30.8% | 44.4% |   14.8% | 33.7% | 41.5% |   14.8% | 32.8% | 42.4% |   12.3% | 31.8% | 45.9% |     12% | 38.1% | 39.9% |    6.9% | 44.2% | 38.9% |    5.2% | 49.2% | 35.6% |    2.4% | 65.3% | 22.3% |
| insertion | O0    |    5 |      0% |    0% |   90% |      0% |    0% |   90% |      0% |    0% |   90% |      0% |    0% |   90% |      0% |    0% |   90% |      0% |    0% |   90% |      0% |    0% |   90% |      0% |    0% |   90% |      0% |    0% |   90% |      0% |  0.4% | 89.6% |      0% |    0% |   90% |    0.2% |  0.5% | 89.3% |      0% |    1% |   89% |      0% |  0.5% | 89.5% |
| insertion | O1    |    7 |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| insertion | O2    |    8 |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |  0.1% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |  0.1% |  0.2% |      0% |  0.3% |  0.2% |      0% |  0.1% |  0.2% |      0% |  0.1% |  0.3% |      0% |  0.2% |  0.2% |      0% |  0.2% |  0.2% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| insertion | O3    |    8 |      0% |  0.1% |  0.2% |      0% |    0% |  0.3% |      0% |  0.1% |  0.2% |      0% |  0.2% |  0.2% |      0% |    0% |  0.3% |      0% |  0.1% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |  0.2% |  0.3% |      0% |    0% |  0.3% |      0% |    0% |  0.3% |      0% |  0.1% |  0.3% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| insertion | Ofast |    8 |      0% |    0% |  0.2% |      0% |  0.2% |  0.2% |      0% |  0.1% |  0.2% |      0% |  0.1% |  0.2% |      0% |    0% |  0.3% |      0% |  0.1% |  0.2% |      0% |  0.2% |  0.2% |      0% |  0.3% |  0.2% |      0% |  0.3% |  0.2% |      0% |  0.3% |  0.2% |      0% |  0.1% |  0.1% |      0% |  0.2% |  0.2% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| merge     | Os    |    7 |    2.2% |  4.2% | 83.6% |      1% |  3.3% | 85.7% |    1.2% |  2.8% |   86% |    1.1% |  2.5% | 86.4% |    0.5% |  1.1% | 88.4% |    0.6% |  1.6% | 87.8% |    0.2% |  0.5% | 89.3% |    0.2% |  0.8% |   89% |    0.5% |  0.8% | 88.7% |    1.2% |    3% | 85.8% |    0.3% |  1.3% | 88.4% |      0% |  1.4% | 88.6% |      0% | 10.5% | 79.5% |      0% |    0% |   90% |
| merge     | O0    |    7 |     20% |    0% |   70% |     20% |    0% |   70% |     20% |    0% |   70% |     20% |    0% |   70% |     20% |    0% |   70% |     20% |    0% |   70% |     20% |    0% |   70% |     20% |    0% |   70% |     20% |    0% |   70% |     20% |   10% |   60% |      0% |   40% |   50% |      0% |   10% |   80% |      0% |   20% |   70% |      0% |   90% |    0% |
| merge     | O1    |    8 |    2.3% |  3.9% | 83.8% |      1% |  3.5% | 85.5% |    1.8% |  3.7% | 84.5% |    0.9% |  2.4% | 86.7% |   10.8% | 22.3% | 56.9% |   12.7% | 28.5% | 48.8% |   14.1% | 29.3% | 46.6% |   15.4% | 31.6% |   43% |   14.6% | 28.5% | 46.9% |   15.7% | 34.7% | 39.6% |   16.5% | 37.2% | 36.3% |      0% | 29.4% | 60.6% |      0% |   60% |   30% |      0% |    0% |   90% |
| merge     | O2    |    9 |    1.2% |  2.4% | 86.4% |    0.7% |  2.6% | 86.7% |    1.1% |  2.4% | 86.5% |    1.3% |    3% | 85.7% |   14.1% | 25.9% |   50% |   12.8% | 25.8% | 51.4% |   15.3% | 29.9% | 44.8% |   16.7% | 27.1% | 46.2% |   15.2% |   27% | 47.8% |     14% | 35.7% | 40.3% |   15.3% | 40.1% | 34.6% |      0% | 29.2% | 60.8% |      0% |   60% |   30% |      0% |    0% |   90% |
| merge     | O3    |  194 |    0.3% |  0.8% | 88.9% |      2% |  3.7% | 84.3% |    1.2% |  2.1% | 86.7% |    1.5% |  2.8% | 85.7% |   13.1% |   31% | 45.9% |   16.4% | 29.8% | 43.8% |   15.9% | 29.7% | 44.4% |     14% |   30% |   46% |   14.1% | 31.2% | 44.7% |   15.4% | 35.6% |   39% |   14.4% | 38.4% | 37.2% |      0% | 28.7% | 61.3% |      0% |   60% |   30% |      0% |    0% |   90% |
| merge     | Ofast |  194 |    0.9% |    2% | 87.1% |    1.4% |  2.8% | 85.8% |    1.8% |  4.6% | 83.6% |    1.5% |  2.8% | 85.7% |   14.9% | 31.2% | 43.9% |     16% | 30.6% | 43.4% |   15.4% | 31.2% | 43.4% |   14.9% | 29.8% | 45.3% |   14.3% | 30.6% | 45.1% |   14.7% | 36.5% | 38.8% |   14.2% | 39.1% | 36.7% |      0% | 30.5% | 59.5% |      0% |   60% |   30% |      0% |    0% |   90% |
| quick     | Os    |    7 |      0% |    0% |   90% |      0% |  0.1% | 89.9% |      0% |  0.2% | 89.8% |    0.2% |  0.4% | 89.4% |      0% |  0.3% | 89.7% |    0.3% |  0.7% |   89% |    0.8% |    1% | 88.2% |    1.1% |  1.8% | 87.1% |    1.8% |  3.4% | 84.8% |    2.9% |  4.9% | 82.2% |    3.4% | 13.5% | 73.1% |    4.1% | 26.9% |   59% |    3.5% | 43.5% |   43% |    2.9% | 63.6% | 23.5% |
| quick     | O0    |    7 |     90% |    0% |    0% |   88.4% |  1.6% |    0% |   86.1% |  3.9% |    0% |   83.3% |  6.7% |    0% |   80.8% |  9.2% |    0% |   78.4% | 11.6% |    0% |   31.5% | 13.2% | 45.3% |   20.8% |   12% | 57.2% |   11.4% | 10.1% | 68.5% |   11.6% | 12.7% | 65.7% |      1% |  2.9% | 86.1% |    1.4% |  4.6% |   84% |      0% |  4.4% | 85.6% |      0% |  1.9% | 88.1% |
| quick     | O1    |    9 |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.3% |      0% |  0.1% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |  0.1% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |  0.1% |  0.2% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| quick     | O2    |   10 |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |  0.1% |  0.2% |      0% |  0.1% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |  0.1% |  0.2% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| quick     | O3    |   70 |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.3% |      0% |  0.2% |  0.2% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |
| quick     | Ofast |   70 |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.2% |      0% |    0% |  0.3% |      0% |    0% |  0.2% |      0% |    0% |  0.1% |      0% |    0% |  0.1% |

*** TODO table fixes [3/5]
- [X] make percents
- [ ] include run cmps (broken out into reliable and un-reliable)
- [ ] graph
- [X] fail -> error
- [X] include "wrong"
