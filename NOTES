# -*- org -*-
#+Title: Sorting in different algorithms and languages
#+Author: Eric Schulte

* Compilation
| c   | gcc -S <asm> <src>    |
| cpp | g++ -S <asm> <src>    |
| hs  | ghc -S <asm> <src>    |
| ml  | ocamlc -o             |
| fs  | see [[http://concatenative.org/wiki/view/Factor/Deployment][Factor/Deployment]] |

This [[http://factor-language.blogspot.com/2010/05/comparing-factors-performance-against.html][blog post]] has some information on compiling executable from sbcl
and factor.

** asm
#+begin_src sh
  #!/bin/bash
  TMP=`echo $3|sed 's/\(.*\)\..*/\1/'`
  as -o $TMP.o $3 && \
      ld $TMP.o -o $2 && \
      rm -f $TMP.o
#+end_src

** ocaml
good discussion of Ocaml types with lots of example assembly
http://www.ocaml-tutorial.org/performance_and_profiling

1) first generate the required .s and startup files
   : ocamlopt -dstartup -S bubble.ml
2) then find out what flags ocamlopt is passing to gcc
   : ocamlopt -verbose -o bub1 bubble.ml
3) call gcc on the startup and .s file, as well as the ocaml libraries
   copied from the verbose output of ocamlopt -verbose, e.g. 
   : gcc -o bub '-L/usr/lib/ocaml' 'a.out.startup.s' '/usr/lib/ocaml/std_exit.o' 'bubble.s' '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl

#+begin_src sh :shebang=#!/bin/bash :tangle fake-gcc
  gcc -o $2 '-L/usr/lib/ocaml' '/home/eschulte/research/epr/asm/sorters/sort-rb/src/insertion-ml.startup.s' '/usr/lib/ocaml/std_exit.o' $3 '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl
#+end_src

** sbcl
This recipe works, although I'm not sure it counts as an executable
1) compile the lisp file into a .core file
   : sbcl --userinit /dev/null --load bubble.sbcl_compile
2) run the core file
   : sbcl --dynamic-space-size 500 --noinform --core bubble.core --userinit /dev/null --load bubble.sbcl_run

#+begin_src lisp
  (handler-bind
   ((sb-ext:defconstant-uneql (lambda (c) (abort c))))
   (load (compile-file "nbody.sbcl" )))
  (save-lisp-and-die "nbody.core" :purify t)
#+end_src
#+begin_src sh
  ln -s ~/perf/shootout/bench/nbody/nbody.sbcl .
  
  cat > nbody.sbcl_compile <<EOF
  (proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
  (handler-bind ((sb-ext:defconstant-uneql (lambda (c) (abort c))))
    (load (compile-file "nbody.sbcl" )))
  (save-lisp-and-die "nbody.core" :purify t)
  EOF
  
  sbcl --userinit /dev/null --load nbody.sbcl_compile
  
  cat > nbody.sbcl_run <<EOF
  (proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
  (main) (quit)
  EOF
  
  time sbcl --dynamic-space-size 500 --noinform --core nbody.core --userinit /dev/null --load nbody.sbcl_run 1000000
#+end_src
** racket
http://docs.racket-lang.org/raco/exe.html

can be done with some subset of the racket executable
: raco exe bubble.rkt

** lua -- can be done through C
http://stackoverflow.com/questions/194520/creating-standalone-lua-executables
: luac script.lua -o script.luac
: bin2c script.luac > code.c
* Tasks [1/2]
** DONE Analyze unreliable results
*** Table
#+begin_src sh :dir results/unreliable/ :cache yes
  MEAN_CMD='{
    for (i=1; i<=NF; i++)
    {
        if($i ~ /[0-9.]/){sum[i] += $i; count[i]++}
        if(i == 1){ line = sum[i]/count[i] }else{ line = line " " sum[i]/count[i]}
    }
    print line
  }'
  ZERO_CMD='{zeros=0; for(i=1;i<=NF; i++){if($i == 0){zeros++;}}; print (zeros * 10);}'
  WRONG_CMD='{wrongs=0; for(i=1;i<=NF; i++){if($i > 0){wrongs++;}}; print (wrongs * 10);}'
  ERROR_CMD='{errors=0; for(i=1;i<=NF; i++){if($i < 0){errors++;}}; print (errors * 10);}'
  
  GRADATIONS=(0 0.001 0.0025 0.005 0.0075 0.01 0.025 0.05 0.075 0.1 0.25 0.5 0.75 1)
  
  echo -ne "\t\t\t"
  for ur in ${GRADATIONS[@]};do
      echo -ne "$ur%\t\t\t"
  done
  echo ""
  echo -ne "alg\tflag\tcmps"
  for ur in ${GRADATIONS[@]};do
      echo -ne "\tcorrect\twrong\terror"
  done
  echo ""
  for alg in bubble insertion merge quick;do
      for flag in Os O0 O1 O2 O3 Ofast;do
          ASM=_${alg}_c_gcc_${flag}.s
          COUNT=$(grep -c $'^\tcmp' $ASM)
          echo -ne "$alg\t$flag\t$COUNT"
          for ur in ${GRADATIONS[@]};do
              TEST=_${alg}_c_gcc_${flag}_ur_${ur}.test
              CORRECT=$(head -100 $TEST|awk "$ZERO_CMD"|awk "$MEAN_CMD"|tail -1)
              echo -ne "\t$CORRECT%"
              WRONG=$(head -100 $TEST|awk "$WRONG_CMD"|awk "$MEAN_CMD"|tail -1)
              echo -ne "\t$WRONG%"
              ERROR=$(head -100 $TEST|awk "$ERROR_CMD"|awk "$MEAN_CMD"|tail -1)
              echo -ne "\t$ERROR%"
          done
          echo ""
      done
  done
#+end_src

#+Caption: Average correct and failed sorting runs by % unreliable assembler comparisons.
#+RESULTS[963a48465bb23b0992fc267dde55cc5a96d607ea]:
|           |       |      |      0% |       |       |  0.001% |       |       | 0.0025% |       |       |  0.005% |       |       | 0.0075% |       |       |   0.01% |       |       |  0.025% |       |       |   0.05% |       |       |  0.075% |       |       |    0.1% |       |       |   0.25% |       |       |    0.5% |       |       |   0.75% |       |       |      1% |       |       |
| alg       | flag  | cmps | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error | correct | wrong | error |
| bubble    | Os    |    4 |    7.2% |    0% | 92.8% |    7.2% |    0% | 92.8% |    6.8% |    0% | 93.2% |    6.8% |    0% | 93.2% |    6.8% |    0% | 93.2% |    6.8% |    0% | 93.2% |    6.8% |    0% | 93.2% |      7% |    0% |   93% |    6.8% |    0% | 93.2% |      7% |    0% |   93% |      7% |    0% |   93% |      7% |    0% |   93% |    6.8% |    0% | 93.2% |      7% |    0% |   93% |
| bubble    | O0    |    5 |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |   99.9% |  0.1% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |
| bubble    | O1    |    5 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| bubble    | O2    |    5 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| bubble    | O3    |    5 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| bubble    | Ofast |    5 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| insertion | Os    |    4 |     20% |  0.1% | 79.9% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |
| insertion | O0    |    5 |     30% |   70% |    0% |     30% |   70% |    0% |     30% |   70% |    0% |     30% | 69.9% |  0.1% |     30% |   70% |    0% |     30% |   70% |    0% |   29.9% |   70% |  0.1% |     30% |   70% |    0% |     30% |   70% |    0% |     30% |   70% |    0% |     30% |   70% |    0% |     30% |   70% |    0% |     30% |   70% |    0% |     30% |   70% |    0% |
| insertion | O1    |    7 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| insertion | O2    |    8 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| insertion | O3    |    8 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| insertion | Ofast |    8 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| merge     | Os    |    7 |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |
| merge     | O0    |    7 |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |     20% |    0% |   80% |
| merge     | O1    |    8 |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |
| merge     | O2    |    9 |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |    1.2% |    0% | 98.8% |
| merge     | O3    |  194 |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |
| merge     | Ofast |  194 |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |    0.8% |    0% | 99.2% |
| quick     | Os    |    7 |    0.6% |  1.2% | 98.2% |    0.6% |  1.2% | 98.2% |    0.8% |  1.6% | 97.6% |    0.8% |  1.6% | 97.6% |    0.8% |  1.6% | 97.6% |    0.4% |  0.8% | 98.8% |    0.4% |  0.8% | 98.8% |    0.4% |  0.8% | 98.8% |    0.4% |  0.8% | 98.8% |    0.2% |  0.4% | 99.4% |    0.2% |  0.4% | 99.4% |    0.2% |  0.4% | 99.4% |    0.4% |  0.8% | 98.8% |    0.6% |  1.2% | 98.2% |
| quick     | O0    |    7 |   99.9% |  0.1% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |   99.9% |  0.1% |    0% |   99.9% |  0.1% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |   99.9% |  0.1% |    0% |    100% |    0% |    0% |   99.8% |  0.2% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |    100% |    0% |    0% |
| quick     | O1    |    9 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| quick     | O2    |   10 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| quick     | O3    |   70 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |
| quick     | Ofast |   70 |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |      0% |  9.9% |  0.2% |

*** TODO table fixes [3/5]
- [X] make percents
- [ ] include run cmps (broken out into reliable and un-reliable)
- [ ] graph
- [X] fail -> error
- [X] include "wrong"
- [ ] what's causing errors for non O0 optimization levels?
