# -*- org -*-
#+Title: Sorting in different algorithms and languages
#+Author: Eric Schulte
#+Options: ^:{}

* Compilation
| c   | gcc -S <asm> <src>    |
| cpp | g++ -S <asm> <src>    |
| hs  | ghc -S <asm> <src>    |
| ml  | ocamlc -o             |
| fs  | see [[http://concatenative.org/wiki/view/Factor/Deployment][Factor/Deployment]] |

This [[http://factor-language.blogspot.com/2010/05/comparing-factors-performance-against.html][blog post]] has some information on compiling executable from sbcl
and factor.

** asm
#+begin_src sh
  #!/bin/bash
  TMP=`echo $3|sed 's/\(.*\)\..*/\1/'`
  as -o $TMP.o $3 && \
      ld $TMP.o -o $2 && \
      rm -f $TMP.o
#+end_src

** ocaml
good discussion of Ocaml types with lots of example assembly
http://www.ocaml-tutorial.org/performance_and_profiling

1) first generate the required .s and startup files
   : ocamlopt -dstartup -S bubble.ml
2) then find out what flags ocamlopt is passing to gcc
   : ocamlopt -verbose -o bub1 bubble.ml
3) call gcc on the startup and .s file, as well as the ocaml libraries
   copied from the verbose output of ocamlopt -verbose, e.g. 
   : gcc -o bub '-L/usr/lib/ocaml' 'a.out.startup.s' '/usr/lib/ocaml/std_exit.o' 'bubble.s' '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl

#+begin_src sh :shebang=#!/bin/bash :tangle fake-gcc
  gcc -o $2 '-L/usr/lib/ocaml' '/home/eschulte/research/epr/asm/sorters/sort-rb/src/insertion-ml.startup.s' '/usr/lib/ocaml/std_exit.o' $3 '/usr/lib/ocaml/stdlib.a' '/usr/lib/ocaml/libasmrun.a' -lm  -ldl
#+end_src

** sbcl
This recipe works, although I'm not sure it counts as an executable
1) compile the lisp file into a .core file
   : sbcl --userinit /dev/null --load bubble.sbcl_compile
2) run the core file
   : sbcl --dynamic-space-size 500 --noinform --core bubble.core --userinit /dev/null --load bubble.sbcl_run

#+begin_src lisp
  (handler-bind
   ((sb-ext:defconstant-uneql (lambda (c) (abort c))))
   (load (compile-file "nbody.sbcl" )))
  (save-lisp-and-die "nbody.core" :purify t)
#+end_src
#+begin_src sh
  ln -s ~/perf/shootout/bench/nbody/nbody.sbcl .
  
  cat > nbody.sbcl_compile <<EOF
  (proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
  (handler-bind ((sb-ext:defconstant-uneql (lambda (c) (abort c))))
    (load (compile-file "nbody.sbcl" )))
  (save-lisp-and-die "nbody.core" :purify t)
  EOF
  
  sbcl --userinit /dev/null --load nbody.sbcl_compile
  
  cat > nbody.sbcl_run <<EOF
  (proclaim '(optimize (speed 3) (safety 0) (debug 0) (compilation-speed 0) (space 0)))
  (main) (quit)
  EOF
  
  time sbcl --dynamic-space-size 500 --noinform --core nbody.core --userinit /dev/null --load nbody.sbcl_run 1000000
#+end_src
** racket
http://docs.racket-lang.org/raco/exe.html

can be done with some subset of the racket executable
: raco exe bubble.rkt

** lua -- can be done through C
http://stackoverflow.com/questions/194520/creating-standalone-lua-executables
: luac script.lua -o script.luac
: bin2c script.luac > code.c
* Tasks [6/11]
** TODO Analyze unreliable results [6/10]
*** DONE Initial Runs and Results [5/5]
**** DONE Error Rate
1. parse data from raw results
   #+name: unreliable-sorters
   #+begin_src sh :dir results/unreliable/ :cache yes
     # If segfault, then set error to list size squared.
     #   sizes: 10 9 7 2 1 1 10 94 20 10
     # squared: 100 81 49 4 1 1 100 8836 400 100
     AVE_ERR='BEGIN{
     lookup[0]=100;
     lookup[1]=81;
     lookup[2]=49;
     lookup[3]=4;
     lookup[4]=1;
     lookup[5]=1;
     lookup[6]=100;
     lookup[7]=8836;
     lookup[8]=400;
     lookup[9]=100; }
     {for(i=1;i<=NF; i++){if($i < 0){total += lookup[i];}else{total+=$i;}; many+=1}}
     END{print total/many}'
     ZERO_CMD='{zeros=0; for(i=1;i<=NF; i++){if($i == 0){zeros++;}}; print (zeros * 10);}'
     WRONG_CMD='{wrongs=0; for(i=1;i<=NF; i++){if($i > 0){wrongs++;}}; print (wrongs * 10);}'
     ERROR_CMD='{errors=0; for(i=1;i<=NF; i++){if($i < 0){errors++;}}; print (errors * 10);}'
     
     GRADATIONS=(0 0.001 0.0025 0.005 0.0075 0.01 0.025 0.05 0.075 0.1 0.25 0.5 0.75 1)
     
     echo -ne "sorter"
     for ur in ${GRADATIONS[@]};do
         echo -ne "\t$ur%"
     done
     echo ""
     for alg in bubble insertion merge quick;do
         for flag in Os O0 O1 O2 O3 Ofast;do
             ASM=_${alg}_c_gcc_${flag}.s
             # COUNT=$(grep -c $'^\tcmp' $ASM)
             echo -ne "$alg-$flag"
             for ur in ${GRADATIONS[@]};do
                 TEST=_${alg}_c_gcc_${flag}_ur_${ur}.test
                 ERR=$(tail -100 $TEST|awk "$AVE_ERR")
                 echo -ne "\t$ERR"
                 # CORRECT=$(tail -100 $TEST|awk "$ZERO_CMD"|awk "$MEAN_CMD"|tail -1)
                 # echo -ne "\t$CORRECT%"
                 # WRONG=$(tail -100 $TEST|awk "$WRONG_CMD"|awk "$MEAN_CMD"|tail -1)
                 # echo -ne "\t$WRONG%"
                 # ERROR=$(tail -100 $TEST|awk "$ERROR_CMD"|awk "$MEAN_CMD"|tail -1)
                 # echo -ne "\t$ERROR%"
             done
             echo ""
         done
     done
   #+end_src

   #+Caption: Average correct and failed sorting runs by % unreliable assembler comparisons.
   #+RESULTS[d980717544e8a47dc6819d7627695a8ceb3774a8]: unreliable-sorters
   | sorter          | 0% |    0.001% |  0.0025% |  0.005% | 0.0075% |   0.01% |  0.025% |   0.05% |  0.075% |    0.1% |   0.25% |    0.5% |   0.75% |      1% |
   | bubble-Os       |  0 |   12.3033 |  24.6411 | 24.2132 | 36.6052 | 17.5084 | 61.5125 | 63.2677 | 84.8378 | 181.199 | 253.116 | 469.428 | 691.522 |   957.2 |
   | bubble-O0       |  0 |   13.6258 |  15.6992 | 20.0618 | 21.2031 | 22.6928 | 31.9083 | 40.4813 | 42.5265 | 47.7707 | 51.4766 | 54.6421 | 55.7801 | 55.8371 |
   | bubble-O1       |  0 |   12.3841 |  17.1796 | 63.4969 | 98.3793 |  81.881 | 209.779 | 456.648 | 568.579 | 624.634 | 889.483 | 937.404 | 947.438 |   957.2 |
   | bubble-O2       |  0 |   22.1824 |  37.2413 | 17.8536 | 117.697 | 96.3507 | 192.561 |  390.31 | 539.107 | 621.715 | 852.156 |  957.26 | 947.649 |   957.2 |
   | bubble-O3       |  0 |   4.13221 |  48.5582 | 65.5414 | 116.973 | 150.747 | 210.601 | 426.544 | 532.212 | 580.083 | 861.626 | 910.376 | 956.402 |   957.2 |
   | bubble-Ofast    |  0 |   23.1861 |  28.1091 | 79.5084 | 80.4853 | 122.736 | 237.108 |  401.15 |  540.13 |  624.49 | 879.789 | 937.608 | 947.813 |   957.2 |
   | insertion-Os    |  0 | 0.0452632 | 0.325263 | 9.96211 | 10.2994 |  19.673 | 22.3113 | 33.6254 | 118.296 |  87.348 | 284.778 | 581.758 | 760.856 |   957.2 |
   | insertion-O0    |  0 |   75.6308 |  77.2456 | 89.9511 | 190.227 | 269.282 | 435.007 | 636.076 | 818.807 | 864.889 | 865.564 | 951.574 |  954.32 |   957.2 |
   | insertion-O1    |  0 |   10.8623 |  23.7435 | 32.6503 |  25.682 | 35.5632 | 69.8577 | 104.901 | 237.103 | 238.694 | 452.799 | 740.988 | 874.834 |   957.2 |
   | insertion-O2    |  0 |   11.0776 |   12.587 | 14.7361 | 17.6217 | 16.7479 | 78.3785 | 176.799 | 144.122 | 285.459 | 639.621 | 841.768 | 955.671 |   957.2 |
   | insertion-O3    |  0 |   11.6863 |  13.4481 | 32.8323 | 23.6304 | 53.8274 | 58.8758 | 165.509 | 244.909 | 211.796 | 556.464 | 809.558 |  929.56 |   957.2 |
   | insertion-Ofast |  0 |    19.022 |  23.5429 | 34.1108 | 44.1058 | 17.0845 | 70.1985 | 123.511 | 273.743 | 321.988 | 641.838 | 836.439 | 938.511 |   957.2 |
   | merge-Os        |  0 |   1.24211 |  4.83807 |  7.5441 | 23.7841 |   89.76 | 109.903 | 169.836 | 169.836 | 169.836 | 169.836 | 169.836 | 169.836 |   957.2 |
   | merge-O0        |  0 |   8.10504 |  15.1363 |  20.245 |  20.571 | 25.0688 |  36.999 | 44.9003 |  46.758 | 49.4295 | 52.3797 | 138.116 | 954.566 |   957.2 |
   | merge-O1        |  0 |   14.7376 |  15.9269 | 52.3638 |  22.744 | 50.3425 |  162.12 | 169.836 | 169.836 | 169.836 | 169.836 | 169.836 | 956.022 |   957.2 |
   | merge-O2        |  0 |   1.72135 |  48.9688 | 17.2983 | 79.7918 | 75.1184 | 161.991 | 175.132 | 169.836 | 169.836 | 169.836 | 169.836 | 957.196 |   957.2 |
   | merge-O3        |  0 |   14.3737 |  60.1217 | 23.6566 | 139.368 | 103.723 | 128.961 | 169.836 | 169.836 | 169.836 | 169.836 | 169.836 | 169.836 |   957.2 |
   | merge-Ofast     |  0 |   1.42105 |   36.725 | 77.0109 | 64.5876 | 61.4701 | 120.022 | 169.836 | 169.836 | 169.836 | 169.836 | 169.836 | 169.836 |   957.2 |
   | quick-Os        |  0 |  0.989485 |  1.97263 | 12.9527 | 14.9569 | 7.86569 | 22.2257 | 92.9625 | 92.4179 | 132.637 | 299.573 | 935.012 |  956.99 |   957.2 |
   | quick-O0        |  0 |   4.03891 |  7.31899 | 12.8941 | 15.1848 | 19.0755 | 23.3562 | 31.6875 |  39.641 |  42.783 | 81.3544 | 679.017 | 955.789 |   957.2 |
   | quick-O1        |  0 |   1.14316 |  3.65368 | 6.73557 | 46.3855 | 28.3508 | 27.4214 | 95.5752 | 171.037 | 248.985 | 373.654 | 910.355 | 956.817 |   957.2 |
   | quick-O2        |  0 |   1.50105 |   12.551 | 5.77754 | 17.8309 | 9.22246 | 23.1342 | 86.7121 | 190.501 | 259.294 | 458.859 | 754.845 | 872.536 |   957.2 |
   | quick-O3        |  0 |   1.49789 |  12.4648 | 24.8319 | 17.7495 | 19.1895 | 43.6775 | 77.8899 | 100.627 | 158.135 | 512.719 | 836.614 | 892.414 |   957.2 |
   | quick-Ofast     |  0 |   1.43533 |  2.90031 | 7.40126 |  36.745 | 11.1455 | 62.3019 | 76.8683 | 108.767 | 174.553 | 486.655 | 764.275 | 910.889 |   957.2 |

2. transpose the data
   #+name: unreliable-sorters-trans
   #+begin_src sh :var in=unreliable-sorters :cache yes
   echo "$in"|~/bin/transpose
   #+end_src

   #+RESULTS[0122db19d962b46cf7ecbb9494f7e4149c8534e6]: unreliable-sorters-trans
   |  sorter | bubble-Os | bubble-O0 | bubble-O1 | bubble-O2 | bubble-O3 | bubble-Ofast | insertion-Os | insertion-O0 | insertion-O1 | insertion-O2 | insertion-O3 | insertion-Ofast | merge-Os | merge-O0 | merge-O1 | merge-O2 | merge-O3 | merge-Ofast | quick-Os | quick-O0 | quick-O1 | quick-O2 | quick-O3 | quick-Ofast |
   |      0% |         0 |         0 |         0 |         0 |         0 |            0 |            0 |            0 |            0 |            0 |            0 |               0 |        0 |        0 |        0 |        0 |        0 |           0 |        0 |        0 |        0 |        0 |        0 |           0 |
   |  0.001% |   12.3033 |   13.6258 |   12.3841 |   22.1824 |   4.13221 |      23.1861 |    0.0452632 |      75.6308 |      10.8623 |      11.0776 |      11.6863 |          19.022 |  1.24211 |  8.10504 |  14.7376 |  1.72135 |  14.3737 |     1.42105 | 0.989485 |  4.03891 |  1.14316 |  1.50105 |  1.49789 |     1.43533 |
   | 0.0025% |   24.6411 |   15.6992 |   17.1796 |   37.2413 |   48.5582 |      28.1091 |     0.325263 |      77.2456 |      23.7435 |       12.587 |      13.4481 |         23.5429 |  4.83807 |  15.1363 |  15.9269 |  48.9688 |  60.1217 |      36.725 |  1.97263 |  7.31899 |  3.65368 |   12.551 |  12.4648 |     2.90031 |
   |  0.005% |   24.2132 |   20.0618 |   63.4969 |   17.8536 |   65.5414 |      79.5084 |      9.96211 |      89.9511 |      32.6503 |      14.7361 |      32.8323 |         34.1108 |   7.5441 |   20.245 |  52.3638 |  17.2983 |  23.6566 |     77.0109 |  12.9527 |  12.8941 |  6.73557 |  5.77754 |  24.8319 |     7.40126 |
   | 0.0075% |   36.6052 |   21.2031 |   98.3793 |   117.697 |   116.973 |      80.4853 |      10.2994 |      190.227 |       25.682 |      17.6217 |      23.6304 |         44.1058 |  23.7841 |   20.571 |   22.744 |  79.7918 |  139.368 |     64.5876 |  14.9569 |  15.1848 |  46.3855 |  17.8309 |  17.7495 |      36.745 |
   |   0.01% |   17.5084 |   22.6928 |    81.881 |   96.3507 |   150.747 |      122.736 |       19.673 |      269.282 |      35.5632 |      16.7479 |      53.8274 |         17.0845 |    89.76 |  25.0688 |  50.3425 |  75.1184 |  103.723 |     61.4701 |  7.86569 |  19.0755 |  28.3508 |  9.22246 |  19.1895 |     11.1455 |
   |  0.025% |   61.5125 |   31.9083 |   209.779 |   192.561 |   210.601 |      237.108 |      22.3113 |      435.007 |      69.8577 |      78.3785 |      58.8758 |         70.1985 |  109.903 |   36.999 |   162.12 |  161.991 |  128.961 |     120.022 |  22.2257 |  23.3562 |  27.4214 |  23.1342 |  43.6775 |     62.3019 |
   |   0.05% |   63.2677 |   40.4813 |   456.648 |    390.31 |   426.544 |       401.15 |      33.6254 |      636.076 |      104.901 |      176.799 |      165.509 |         123.511 |  169.836 |  44.9003 |  169.836 |  175.132 |  169.836 |     169.836 |  92.9625 |  31.6875 |  95.5752 |  86.7121 |  77.8899 |     76.8683 |
   |  0.075% |   84.8378 |   42.5265 |   568.579 |   539.107 |   532.212 |       540.13 |      118.296 |      818.807 |      237.103 |      144.122 |      244.909 |         273.743 |  169.836 |   46.758 |  169.836 |  169.836 |  169.836 |     169.836 |  92.4179 |   39.641 |  171.037 |  190.501 |  100.627 |     108.767 |
   |    0.1% |   181.199 |   47.7707 |   624.634 |   621.715 |   580.083 |       624.49 |       87.348 |      864.889 |      238.694 |      285.459 |      211.796 |         321.988 |  169.836 |  49.4295 |  169.836 |  169.836 |  169.836 |     169.836 |  132.637 |   42.783 |  248.985 |  259.294 |  158.135 |     174.553 |
   |   0.25% |   253.116 |   51.4766 |   889.483 |   852.156 |   861.626 |      879.789 |      284.778 |      865.564 |      452.799 |      639.621 |      556.464 |         641.838 |  169.836 |  52.3797 |  169.836 |  169.836 |  169.836 |     169.836 |  299.573 |  81.3544 |  373.654 |  458.859 |  512.719 |     486.655 |
   |    0.5% |   469.428 |   54.6421 |   937.404 |    957.26 |   910.376 |      937.608 |      581.758 |      951.574 |      740.988 |      841.768 |      809.558 |         836.439 |  169.836 |  138.116 |  169.836 |  169.836 |  169.836 |     169.836 |  935.012 |  679.017 |  910.355 |  754.845 |  836.614 |     764.275 |
   |   0.75% |   691.522 |   55.7801 |   947.438 |   947.649 |   956.402 |      947.813 |      760.856 |       954.32 |      874.834 |      955.671 |       929.56 |         938.511 |  169.836 |  954.566 |  956.022 |  957.196 |  169.836 |     169.836 |   956.99 |  955.789 |  956.817 |  872.536 |  892.414 |     910.889 |
   |      1% |     957.2 |   55.8371 |     957.2 |     957.2 |     957.2 |        957.2 |        957.2 |        957.2 |        957.2 |        957.2 |        957.2 |           957.2 |    957.2 |    957.2 |    957.2 |    957.2 |    957.2 |       957.2 |    957.2 |    957.2 |    957.2 |    957.2 |    957.2 |       957.2 |

4. plot
   #+begin_src gnuplot :file results/unreliable-sorters-error.svg :var data=unreliable-sorters-trans
     set term svg size 640,600
     set title 'Sorters error by reliability of the x86 cmp operations'
     set ylabel 'Average error'
     set xlabel 'Chance of unreliable result from cmp'
     set key above
     set key autotitle columnhead
     set logscale x
     set logscale y
     set termoption dash
     do for [i=0:5] { set style line (i+2) lt i lc rgb "red" }
     do for [i=0:5] { set style line (i+8) lt i lc rgb "orange" }
     do for [i=0:5] { set style line (i+14) lt i lc rgb "blue" }
     do for [i=0:5] { set style line (i+20) lt i lc rgb "green" }
     plot for [i=2:7] data u 1:i w lines linestyle i, \
     for [i=8:13]  '' u 1:i w lines linestyle i, \
     for [i=14:19] '' u 1:i w lines linestyle i, \
     for [i=20:25] '' u 1:i w lines linestyle i;
   #+end_src

   #+RESULTS:
   [[file:results/unreliable-sorters-error.svg]]

**** DONE Failure Rate
#+name: unreliable-error-rate
#+begin_src sh  :dir results/unreliable/ :cache yes
  AVE_ERR='{for(i=1;i<=NF; i++){if($i < 0){total += 1.0;}; many+=1}}
  END{print total/many}'
  
  GRADATIONS=(0 0.001 0.0025 0.005 0.0075 0.01 0.025 0.05 0.075 0.1 0.25 0.5 0.75 1)
  
  echo -ne "sorter"
  for ur in ${GRADATIONS[@]};do
      echo -ne "\t$ur"
  done
  echo ""
  for alg in bubble insertion merge quick;do
      for flag in Os O0 O1 O2 O3 Ofast;do
          ASM=_${alg}_c_gcc_${flag}.s
          # COUNT=$(grep -c $'^\tcmp' $ASM)
          echo -ne "$alg-$flag"
          for ur in ${GRADATIONS[@]};do
              TEST=_${alg}_c_gcc_${flag}_ur_${ur}.test
              ERROR=$(tail -100 $TEST|awk "$AVE_ERR")
              echo -ne "\t$ERROR"
          done
          echo ""
      done
  done
#+end_src

#+RESULTS[f6d687bd0e3ad5277a0230b07a580f4c1e99c1d6]: unreliable-error-rate
| sorter          | 0 |      0.001 |     0.0025 |      0.005 |     0.0075 |       0.01 |     0.025 |      0.05 |      0.075 |        0.1 |     0.25 |      0.5 |     0.75 | 1 |
| bubble-Os       | 0 | 0.00104932 | 0.00524659 | 0.00208986 | 0.00837696 | 0.00627615 | 0.0302714 | 0.0479167 |  0.0841996 |   0.111917 | 0.243827 | 0.478484 | 0.744877 | 1 |
| bubble-O0       | 0 |          0 |          0 |          0 |          0 |          0 |         0 |         0 |          0 |          0 |        0 |        0 |        0 | 0 |
| bubble-O1       | 0 |  0.0146905 |  0.0262605 |  0.0597484 |  0.0909091 |   0.107516 |  0.228453 |  0.387164 |   0.468524 |   0.527835 | 0.765609 | 0.906027 | 0.980612 | 1 |
| bubble-O2       | 0 |  0.0115304 |  0.0346275 |  0.0554393 |   0.106583 |   0.127992 |  0.238589 |  0.358393 |   0.457819 |   0.527235 | 0.758691 | 0.926305 | 0.988776 | 1 |
| bubble-O3       | 0 |  0.0125918 |  0.0482686 |   0.066107 |  0.0980188 |    0.12487 |  0.235477 |  0.358101 |   0.469008 |   0.537668 | 0.762538 | 0.919388 | 0.984694 | 1 |
| bubble-Ofast    | 0 |  0.0157729 |  0.0325289 |  0.0627615 |  0.0953878 |   0.126437 |  0.246377 |  0.370984 |    0.46241 |   0.519092 | 0.781186 | 0.918284 | 0.984694 | 1 |
| insertion-Os    | 0 |          0 | 0.00210526 | 0.00947368 | 0.00630252 | 0.00736067 |  0.024109 | 0.0514166 |   0.084463 |   0.081761 | 0.241952 | 0.517454 | 0.748209 | 1 |
| insertion-O0    | 0 |  0.0784519 |  0.0898642 |   0.145682 |    0.19563 |    0.23444 |  0.365424 |  0.476337 |   0.571429 |   0.604317 | 0.687885 | 0.817996 |  0.90184 | 1 |
| insertion-O1    | 0 | 0.00105152 | 0.00732984 |  0.0104712 |  0.0104603 |  0.0125392 | 0.0571132 |  0.101765 |   0.155602 |   0.193182 | 0.463515 | 0.751025 | 0.939734 | 1 |
| insertion-O2    | 0 | 0.00314795 |  0.0104822 |  0.0188482 |  0.0188088 |  0.0209205 | 0.0709072 |   0.13354 |   0.190279 |   0.270661 | 0.603909 | 0.852911 | 0.985714 | 1 |
| insertion-O3    | 0 | 0.00419727 | 0.00104932 |  0.0167715 |  0.0230366 |  0.0282427 | 0.0866388 |  0.132368 |   0.204545 |    0.24871 |  0.57377 | 0.884458 | 0.983673 | 1 |
| insertion-Ofast | 0 | 0.00524109 | 0.00941423 |  0.0229885 |  0.0219895 |  0.0177268 | 0.0665281 |  0.127859 |   0.209544 |   0.259298 | 0.593238 |  0.87334 | 0.979592 | 1 |
| merge-Os        | 0 | 0.00105263 |  0.0042061 |  0.0135685 |  0.0391363 |   0.154286 |  0.270335 |  0.472727 |   0.472727 |   0.472727 | 0.472727 | 0.472727 | 0.472727 | 1 |
| merge-O0        | 0 |          0 |          0 |          0 |          0 |          0 |         0 |         0 |          0 |          0 |        0 | 0.104663 | 0.930612 | 1 |
| merge-O1        | 0 | 0.00824176 |  0.0416141 |  0.0592217 |  0.0214477 |  0.0880626 |  0.292308 |  0.472727 |   0.472727 |   0.472727 | 0.472727 | 0.472727 | 0.993266 | 1 |
| merge-O2        | 0 | 0.00315457 |   0.129808 |  0.0105042 |   0.144981 |  0.0899123 |  0.469505 |  0.464657 |   0.472727 |   0.472727 | 0.472727 | 0.472727 | 0.995918 | 1 |
| merge-O3        | 0 | 0.00437956 |  0.0669371 |  0.0113208 |     0.1893 |   0.242735 |  0.383432 |  0.472727 |   0.472727 |   0.472727 | 0.472727 | 0.472727 | 0.472727 | 1 |
| merge-Ofast     | 0 | 0.00315789 |  0.0577933 |   0.146608 |   0.067757 |  0.0438247 |  0.324444 |  0.472727 |   0.472727 |   0.472727 | 0.472727 | 0.472727 | 0.472727 | 1 |
| quick-Os        | 0 | 0.00210305 | 0.00421053 | 0.00840336 | 0.00840336 |  0.0115425 | 0.0208986 | 0.0635417 |  0.0696466 |   0.102804 | 0.346392 | 0.812883 | 0.991837 | 1 |
| quick-O0        | 0 |          0 |          0 |          0 |          0 |          0 |         0 |         0 | 0.00104058 | 0.00207684 | 0.100518 | 0.530801 |  0.93047 | 1 |
| quick-O1        | 0 | 0.00315789 | 0.00736842 |  0.0115425 |  0.0157563 |   0.017801 | 0.0566038 |  0.105428 |   0.145682 |   0.212435 | 0.501025 | 0.916327 | 0.992857 | 1 |
| quick-O2        | 0 |          0 | 0.00630915 | 0.00944386 |  0.0136555 |  0.0167891 | 0.0293501 | 0.0935551 |    0.15161 |   0.199793 | 0.476386 | 0.782209 | 0.922449 | 1 |
| quick-O3        | 0 | 0.00526316 |  0.0084122 |  0.0115546 | 0.00838574 |  0.0230366 | 0.0513089 |  0.111111 |   0.160955 |    0.19563 | 0.470165 | 0.829418 | 0.940816 | 1 |
| quick-Ofast     | 0 | 0.00210305 | 0.00419727 |  0.0136555 |  0.0241343 |  0.0230366 | 0.0597484 | 0.0871369 |   0.142264 |   0.194617 | 0.496907 | 0.844581 | 0.957143 | 1 |

#+headers: :file results/unreliable-sorters-fail.svg 
#+begin_src gnuplot :var data=unreliable-error-rate
  awk="< awk '{ for (f=1; f<=NF; f++) a[NR, f] = $f } NF > nf { nf = NF } END { for (f=1; f<= nf; f++) for (r=1; r<=NR; r++) printf a[r,f] (r==NR ? RS : FS); }' ".data
  set term svg size 640,600
  set title 'Failure rate by reliability of the x86 cmp operations'
  set ylabel 'Failure Rate'
  set xlabel 'Chance of unreliable result from cmp'
  set key above
  set key autotitle columnhead
  set logscale x
  set termoption dash
  do for [i=0:5] { set style line (i+2) lt i lc rgb "red" }
  do for [i=0:5] { set style line (i+8) lt i lc rgb "orange" }
  do for [i=0:5] { set style line (i+14) lt i lc rgb "blue" }
  do for [i=0:5] { set style line (i+20) lt i lc rgb "green" }
  plot for [i=2:7] awk u 1:i w lines linestyle i, \
  for [i=8:13]  '' u 1:i w lines linestyle i, \
  for [i=14:19] '' u 1:i w lines linestyle i, \
  for [i=20:25] '' u 1:i w lines linestyle i;
#+end_src

#+RESULTS:
[[file:results/unreliable-sorters-fail.svg]]

**** DONE Error Rate of non-Failures
#+name: unreliable-sorters-error-non-failure
#+begin_src sh :dir results/unreliable/ :cache yes
  AVE_ERR='{for(i=1;i<=NF; i++){if($i >= 0){total+=$i; many+=1;}}}
  END{if(many > 0){print total/many}else{print "NA"}}'
  ZERO_CMD='{zeros=0; for(i=1;i<=NF; i++){if($i == 0){zeros++;}}; print (zeros * 10);}'
  WRONG_CMD='{wrongs=0; for(i=1;i<=NF; i++){if($i > 0){wrongs++;}}; print (wrongs * 10);}'
  ERROR_CMD='{errors=0; for(i=1;i<=NF; i++){if($i < 0){errors++;}}; print (errors * 10);}'

  GRADATIONS=(0 0.001 0.0025 0.005 0.0075 0.01 0.025 0.05 0.075 0.1 0.25 0.5 0.75 1)

  echo -ne "sorter"
  for ur in ${GRADATIONS[@]};do
      echo -ne "\t$ur%"
  done
  echo ""
  for alg in bubble insertion merge quick;do
      for flag in Os O0 O1 O2 O3 Ofast;do
          ASM=_${alg}_c_gcc_${flag}.s
          # COUNT=$(grep -c $'^\tcmp' $ASM)
          echo -ne "$alg-$flag"
          for ur in ${GRADATIONS[@]};do
              TEST=_${alg}_c_gcc_${flag}_ur_${ur}.test
              ERR=$(tail -100 $TEST|awk "$AVE_ERR")
              echo -ne "\t$ERR"
          done
          echo ""
      done
  done
#+end_src

#+RESULTS[f73510800c5addcfce4a1d3ce6ce59e6215c8697]: unreliable-sorters-error-non-failure
| sorter          | 0% |    0.001% |  0.0025% |   0.005% |  0.0075% |    0.01% |   0.025% |    0.05% |   0.075% |     0.1% |    0.25% |     0.5% |    0.75% | 1%      |
| bubble-Os       |  0 |    11.896 |  14.5538 |  15.0115 |  16.8279 |  16.9842 |  21.9419 |  23.7495 |  27.8797 |  29.9837 |  34.2599 |   33.833 |  35.4056 | NA      |
| bubble-O0       |  0 |   13.6258 |  15.6992 |  20.0618 |  21.2031 |  22.6928 |  31.9083 |  40.4813 |  42.5265 |  47.7707 |  51.4766 |  54.6421 |  55.7801 | 55.8371 |
| bubble-O1       |  0 |  0.753994 |  2.26214 |  2.98439 |  4.11264 |  5.58363 |  3.47645 |  2.43412 |  3.16699 |  3.91921 |  3.45415 |  6.67391 |  9.26316 | NA      |
| bubble-O2       |  0 |  0.942736 |  1.96087 |   4.3876 |  4.18363 |  4.37112 |  3.33106 |  2.67576 |  3.32638 |  3.41522 |  3.26695 |  1.95833 |  5.45455 | NA      |
| bubble-O3       |  0 |  0.679065 |   1.7817 |  3.86404 |  4.76994 |  5.21998 |  3.28358 |  2.99357 |  3.14786 |  3.72098 |  3.88793 |  3.73418 |  15.4667 | NA      |
| bubble-Ofast    |  0 |   1.00748 |  2.07592 |  3.91964 |   4.3314 |  6.51794 |  2.40522 |  2.50577 |  3.16092 |   3.1588 |  3.24766 |   3.9875 |  2.93333 | NA      |
| insertion-Os    |  0 | 0.0452632 | 0.155063 | 0.387885 | 0.401691 | 0.481992 |  1.30612 |  2.65044 |  3.98633 |    5.121 |  15.5247 |   18.617 |  27.2886 | NA      |
| insertion-O0    |  0 |   5.91714 |  7.97589 |  7.13642 |   8.5097 |  7.48509 |  11.6982 |  14.9371 |   15.976 |  16.7558 |  15.9638 | 0.960674 |   1.0625 | NA      |
| insertion-O1    |  0 |   10.7684 |  14.2954 |  13.8857 |  15.8858 |  16.4804 |  20.6751 |  24.1873 |  28.1057 |  30.0026 |  32.8716 |  36.8107 |   35.322 | NA      |
| insertion-O2    |  0 |   10.8705 |  11.8083 |  14.1302 |   15.722 |  15.5224 |  18.6768 |  23.5806 |  23.1737 |  26.3286 |   31.974 |  33.7431 |  33.2143 | NA      |
| insertion-O3    |  0 |   10.8367 |  13.3571 |  13.4168 |  14.1554 |  15.4639 |  17.2766 |  21.1049 |  23.4857 |  27.3365 |  25.8269 |  27.1239 |  38.5625 | NA      |
| insertion-Ofast |  0 |   9.62276 |  13.9799 |  13.9957 |  14.2987 |  16.1285 |  20.2572 |  23.6615 |  21.5039 |  27.3417 |  36.0831 |  29.3548 |    55.85 | NA      |
| merge-Os        |  0 |   1.13804 |  3.48574 |  3.78955 |  6.97051 |  7.04223 |  7.96885 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | NA      |
| merge-O0        |  0 |   8.10504 |  15.1363 |   20.245 |   20.571 |  25.0688 |   36.999 |  44.9003 |   46.758 |  49.4295 |  52.3797 |  52.1921 | 0.897059 | NA      |
| merge-O1        |  0 |  0.958449 |  2.36053 |  4.59712 |  6.84247 |  8.79614 |  6.54037 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | 0.172414 |        2 | NA      |
| merge-O2        |  0 |  0.777426 |  2.48343 |   4.6189 |  7.00435 |  9.42892 | 0.279826 | 0.234951 | 0.172414 | 0.172414 | 0.172414 | 0.172414 |        0 | NA      |
| merge-O3        |  0 |  0.892962 |  3.00435 |  4.77481 |  5.20305 |  5.63205 |  3.50288 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | NA      |
| merge-Ofast     |  0 |  0.897571 |  2.63197 |  4.03205 |  6.51003 |  6.98056 |  6.55482 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | 0.172414 | NA      |
| quick-Os        |  0 |  0.834563 |  1.86998 |  3.42479 |  5.46398 |  6.27601 |  11.9723 |  16.0534 |  15.3978 |  16.0914 |  6.66562 |  1.47541 |        0 | NA      |
| quick-O0        |  0 |   4.03891 |  7.31899 |  12.8941 |  15.1848 |  19.0755 |  23.3562 |  31.6875 |  39.2656 |  42.0395 |  46.2016 |  26.7221 | 0.617647 | NA      |
| quick-O1        |  0 |   1.06019 |  2.52916 |  6.23779 |  8.51547 |   9.3145 |  13.7633 |  16.0723 |  14.2862 |  17.1105 |  22.0965 |  14.0732 |  1.28571 | NA      |
| quick-O2        |  0 |   1.50105 |  3.01587 |  5.00742 |   7.2066 |  8.02668 |  11.3521 |   15.703 |  18.0073 |  19.1009 |  19.4333 |  32.0469 |  30.5526 | NA      |
| quick-O3        |  0 |   1.18413 |  2.55885 |  5.23911 |  7.78541 |  8.52412 |  13.3201 |  14.6414 |  18.5866 |  18.3273 |  27.2718 |  26.7904 |  39.1724 | NA      |
| quick-Ofast     |  0 |   1.30137 |  2.80506 |  4.75399 |  7.10538 |  9.81029 |  12.9788 |  17.0898 |  17.8947 |  19.7404 |  25.1127 |  28.2566 |  32.1429 | NA      |

#+headers: :file results/unreliable-sorters-error-non-fail.svg 
#+begin_src gnuplot :var data=unreliable-sorters-error-non-failure
  awk="< awk '{ for (f=1; f<=NF; f++) a[NR, f] = $f } NF > nf { nf = NF } END { for (f=1; f<= nf; f++) for (r=1; r<=NR; r++) printf a[r,f] (r==NR ? RS : FS); }' ".data
  set term svg size 640,600
  set title 'Error rate of non-failed by reliability of the x86 cmp operations'
  set ylabel 'Failure Rate'
  set xlabel 'Chance of unreliable result from cmp'
  set key above
  set key autotitle columnhead
  set logscale x
  set termoption dash
  do for [i=0:5] { set style line (i+2) lt i lc rgb "red" }
  do for [i=0:5] { set style line (i+8) lt i lc rgb "orange" }
  do for [i=0:5] { set style line (i+14) lt i lc rgb "blue" }
  do for [i=0:5] { set style line (i+20) lt i lc rgb "green" }
  plot for [i=2:7] awk u 1:i w lines linestyle i, \
  for [i=8:13]  '' u 1:i w lines linestyle i, \
  for [i=14:19] '' u 1:i w lines linestyle i, \
  for [i=20:25] '' u 1:i w lines linestyle i;
#+end_src

#+RESULTS:
[[file:results/unreliable-sorters-error-non-fail.svg]]
**** DONE break it out by flag
#+name: unreliable-sorters-error-by-flag
#+begin_src sh  :dir results/unreliable/ :cache yes
  AVE_ERR='{for(i=1;i<=NF; i++){total+=$i; many+=1}} END {print total/many}'
  
  echo -ne "flag"
  for ur in ${GRADATIONS[@]};do
      echo -ne "\t$ur"
  done
  echo ""
  for file in flag*test;do
      echo -e "$file\t$(cat $file|awk "$AVE_ERR")"
  done
#+end_src

#+RESULTS[be09f169502c7e597fcc397effedf532a80f32b3]: unreliable-sorters-error-by-flag
| flag_bubble_sel_sched_pipelining_ur_0.01.test              | 19.9655 |
| flag_bubble_no_ira_share_spill_slots_ur_0.01.test          | 20.0616 |
| flag_bubble_tree_vectorize_ur_0.01.test                    | 20.5762 |
| flag_bubble_sched_stalled_insns_ur_0.01.test               | 20.6015 |
| flag_bubble_gcse_ur_0.01.test                              | 20.6033 |
| flag_bubble_mudflapir_ur_0.01.test                         | 20.8019 |
| flag_bubble_ipa_profile_ur_0.01.test                       | 20.8259 |
| flag_bubble_sched2_use_superblocks_ur_0.01.test            | 20.9384 |
| flag_bubble_auto_inc_dec_ur_0.01.test                      | 20.9447 |
| flag_bubble_merge_all_constants_ur_0.01.test               | 21.0063 |
| flag_bubble_conserve_stack_ur_0.01.test                    | 21.0729 |
| flag_bubble_no_peephole2_ur_0.01.test                      |  21.092 |
| flag_bubble_tree_copyrename_ur_0.01.test                   | 21.0982 |
| flag_bubble_no_peephole_ur_0.01.test                       | 21.1223 |
| flag_bubble_stack_protector_ur_0.01.test                   | 21.1534 |
| flag_bubble_tracer_ur_0.01.test                            |  21.196 |
| flag_bubble_no_defer_pop_ur_0.01.test                      | 21.2203 |
| flag_bubble_unswitch_loops_ur_0.01.test                    | 21.2396 |
| flag_bubble_no_default_inline_ur_0.01.test                 | 21.2675 |
| flag_bubble_no_math_errno_ur_0.01.test                     | 21.2724 |
| flag_bubble_dse_ur_0.01.test                               | 21.2727 |
| flag_bubble_mudflapth_ur_0.01.test                         | 21.3013 |
| flag_bubble_no_guess_branch_probability_ur_0.01.test       | 21.3595 |
| flag_bubble_dce_ur_0.01.test                               | 21.3785 |
| flag_bubble_modulo_sched_allow_regmoves_ur_0.01.test       | 21.4092 |
| flag_bubble_unroll_all_loops_ur_0.01.test                  | 21.4148 |
| flag_bubble_split_wide_types_ur_0.01.test                  | 21.4387 |
| flag_bubble_variable_expansion_in_unroller_ur_0.01.test    | 21.4457 |
| flag_bubble_cx_fortran_rules_ur_0.01.test                  | 21.4536 |
| flag_bubble_ipa_pta_ur_0.01.test                           | 21.4713 |
| flag_bubble_tree_slsr_ur_0.01.test                         | 21.5042 |
| flag_bubble_optimize_sibling_calls_ur_0.01.test            | 21.5819 |
| flag_bubble_cse_skip_blocks_ur_0.01.test                   | 21.6013 |
| flag_bubble_tree_bit_ccp_ur_0.01.test                      | 21.6054 |
| flag_bubble_fmudflap_ur_0.01.test                          | 21.6096 |
| flag_bubble_no_trapping_math_ur_0.01.test                  | 21.6715 |
| flag_bubble_reciprocal_math_ur_0.01.test                   | 21.7029 |
| flag_bubble_stack_protector_all_ur_0.01.test               | 21.7061 |
| flag_bubble_fat_lto_objects_ur_0.01.test                   | 21.7424 |
| flag_bubble_align_jumps_ur_0.01.test                       | 21.7523 |
| flag_bubble_ira_loop_pressure_ur_0.01.test                 | 21.7524 |
| flag_bubble_reorder_blocks_ur_0.01.test                    | 21.7789 |
| flag_bubble_tree_coalesce_vars_ur_0.01.test                | 21.7923 |
| flag_bubble_unsafe_math_optimizations_ur_0.01.test         | 21.7925 |
| flag_bubble_graphite_identity_ur_0.01.test                 | 21.8154 |
| flag_bubble_branch_probabilities_ur_0.01.test              | 21.8332 |
| flag_bubble_tree_dominator_opts_ur_0.01.test               | 21.8359 |
| flag_bubble_finite_math_only_ur_0.01.test                  | 21.8613 |
| flag_bubble_if_conversion_ur_0.01.test                     |  21.863 |
| flag_bubble_sched_stalled_insns_dep_ur_0.01.test           | 21.8745 |
| flag_bubble_no_sched_interblock_ur_0.01.test               | 21.8925 |
| flag_bubble_split_ivs_in_unroller_ur_0.01.test             | 21.8955 |
| flag_bubble_web_ur_0.01.test                               | 21.9102 |
| flag_bubble_loop_block_ur_0.01.test                        | 21.9112 |
| flag_bubble_aggressive_loop_optimizations_ur_0.01.test     | 21.9436 |
| flag_bubble_tree_dce_ur_0.01.test                          | 21.9843 |
| flag_bubble_tree_pta_ur_0.01.test                          | 21.9948 |
| flag_bubble_unit_at_a_time_ur_0.01.test                    | 22.0042 |
| flag_bubble_branch_target_load_optimize_ur_0.01.test       | 22.0073 |
| flag_bubble_tree_phiprop_ur_0.01.test                      | 22.0073 |
| flag_bubble_selective_scheduling2_ur_0.01.test             | 22.0094 |
| flag_bubble_tree_partial_pre_ur_0.01.test                  | 22.0136 |
| flag_bubble_no_toplevel_reorder_ur_0.01.test               |  22.074 |
| flag_bubble_ipa_cp_clone_ur_0.01.test                      | 22.0814 |
| flag_bubble_caller_saves_ur_0.01.test                      | 22.0866 |
| flag_bubble_sched_pressure_ur_0.01.test                    | 22.1056 |
| flag_bubble_inline_functions_ur_0.01.test                  | 22.1064 |
| flag_bubble_lto_ur_0.01.test                               | 22.1127 |
| flag_bubble_no_inline_ur_0.01.test                         | 22.1208 |
| flag_bubble_ira_hoist_pressure_ur_0.01.test                | 22.1385 |
| flag_bubble_crossjumping_ur_0.01.test                      | 22.1545 |
| flag_bubble_cx_limited_range_ur_0.01.test                  | 22.1588 |
| flag_bubble_devirtualize_ur_0.01.test                      | 22.1637 |
| flag_bubble_align_loops_ur_0.01.test                       | 22.1731 |
| flag_bubble_tree_loop_distribution_ur_0.01.test            | 22.1785 |
| flag_bubble_peel_loops_ur_0.01.test                        | 22.1825 |
| flag_bubble_loop_parallelize_all_ur_0.01.test              | 22.1867 |
| flag_bubble_gcse_lm_ur_0.01.test                           | 22.2259 |
| flag_bubble_thread_jumps_ur_0.01.test                      | 22.2409 |
| flag_bubble_tree_vect_loop_version_ur_0.01.test            | 22.2466 |
| flag_bubble_ree_ur_0.01.test                               |  22.251 |
| flag_bubble_btr_bb_exclusive_ur_0.01.test                  | 22.2529 |
| flag_bubble_tree_loop_if_convert_stores_ur_0.01.test       |  22.256 |
| flag_bubble_inline_functions_called_once_ur_0.01.test      | 22.2683 |
| flag_bubble_profile_values_ur_0.01.test                    | 22.2683 |
| flag_bubble_wpa_ur_0.01.test                               | 22.2835 |
| flag_bubble_align_functions_ur_0.01.test                   | 22.2902 |
| flag_bubble_sel_sched_pipelining_outer_loops_ur_0.01.test  | 22.2909 |
| flag_bubble_indirect_inlining_ur_0.01.test                 | 22.2926 |
| flag_bubble_merge_constants_ur_0.01.test                   | 22.2944 |
| flag_bubble_tree_ccp_ur_0.01.test                          | 22.2969 |
| flag_bubble_schedule_insns2_ur_0.01.test                   | 22.2972 |
| flag_bubble_sched_dep_count_heuristic_ur_0.01.test         | 22.3375 |
| flag_bubble_ipa_reference_ur_0.01.test                     | 22.3413 |
| flag_bubble_no_zero_initialized_in_bss_ur_0.01.test        |  22.351 |
| flag_bubble_cse_follow_jumps_ur_0.01.test                  | 22.3699 |
| flag_bubble_tree_sra_ur_0.01.test                          | 22.3719 |
| flag_bubble_vpt_ur_0.01.test                               | 22.3738 |
| flag_bubble_lto_report_ur_0.01.test                        | 22.3873 |
| flag_bubble_gcse_after_reload_ur_0.01.test                 | 22.4042 |
| flag_bubble_regmove_ur_0.01.test                           | 22.4067 |
| flag_bubble_ipa_pure_const_ur_0.01.test                    | 22.4415 |
| flag_bubble_tree_switch_conversion_ur_0.01.test            | 22.4421 |
| flag_bubble_tree_builtin_call_dce_ur_0.01.test             | 22.4562 |
| flag_bubble_reschedule_modulo_scheduled_loops_ur_0.01.test | 22.4703 |
| flag_bubble_predictive_commoning_ur_0.01.test              | 22.4755 |
| flag_bubble_cprop_registers_ur_0.01.test                   | 22.4995 |
| flag_bubble_unsafe_loop_optimizations_ur_0.01.test         |  22.512 |
| flag_bubble_no_function_cse_ur_0.01.test                   | 22.5157 |
| flag_bubble_optimize_register_move_ur_0.01.test            | 22.5266 |
| flag_bubble_move_loop_invariants_ur_0.01.test              | 22.5271 |
| flag_bubble_unroll_loops_ur_0.01.test                      | 22.5277 |
| flag_bubble_no_branch_count_reg_ur_0.01.test               | 22.5298 |
| flag_bubble_keep_inline_functions_ur_0.01.test             | 22.5544 |
| flag_bubble_use_linker_plugin_ur_0.01.test                 | 22.5632 |
| flag_bubble_sched_critical_path_heuristic_ur_0.01.test     | 22.5689 |
| flag_bubble_tree_dse_ur_0.01.test                          | 22.6015 |
| flag_bubble_ivopts_ur_0.01.test                            | 22.6395 |
| flag_bubble_expensive_optimizations_ur_0.01.test           | 22.7046 |
| flag_bubble_keep_static_consts_ur_0.01.test                | 22.7186 |
| flag_bubble_profile_correction_ur_0.01.test                | 22.7445 |
| flag_bubble_tree_ch_ur_0.01.test                           | 22.7471 |
| flag_bubble_single_precision_constant_ur_0.01.test         | 22.7508 |
| flag_bubble_delete_null_pointer_checks_ur_0.01.test        | 22.7573 |
| flag_bubble_signaling_nans_ur_0.01.test                    | 22.7902 |
| flag_bubble_loop_nest_optimize_ur_0.01.test                |  22.829 |
| flag_bubble_gcse_las_ur_0.01.test                          | 22.8337 |
| flag_bubble_align_labels_ur_0.01.test                      | 22.8413 |
| flag_bubble_tree_loop_if_convert_ur_0.01.test              | 22.8685 |
| flag_bubble_rerun_cse_after_loop_ur_0.01.test              | 22.8798 |
| flag_bubble_tree_loop_im_ur_0.01.test                      | 22.8833 |
| flag_bubble_selective_scheduling_ur_0.01.test              |  22.905 |
| flag_bubble_sched_spec_insn_heuristic_ur_0.01.test         | 22.9414 |
| flag_bubble_sched_spec_load_ur_0.01.test                   | 22.9489 |
| flag_bubble_forward_propagate_ur_0.01.test                 | 22.9697 |
| flag_bubble_sched_group_heuristic_ur_0.01.test             | 23.0094 |
| flag_bubble_tree_ter_ur_0.01.test                          | 23.0167 |
| flag_bubble_reorder_functions_ur_0.01.test                 | 23.0397 |
| flag_bubble_tree_loop_linear_ur_0.01.test                  | 23.0428 |
| flag_bubble_loop_strip_mine_ur_0.01.test                   | 23.0469 |
| flag_bubble_whole_program_ur_0.01.test                     | 23.0522 |
| flag_bubble_sched_spec_load_dangerous_ur_0.01.test         | 23.1512 |
| flag_bubble_early_inlining_ur_0.01.test                    | 23.1587 |
| flag_bubble_ipa_cp_ur_0.01.test                            | 23.1806 |
| flag_bubble_sched_rank_heuristic_ur_0.01.test              | 23.1973 |
| flag_bubble_tree_vrp_ur_0.01.test                          | 23.2236 |
| flag_bubble_gcse_sm_ur_0.01.test                           | 23.2349 |
| flag_bubble_sched_last_insn_heuristic_ur_0.01.test         | 23.2492 |
| flag_bubble_schedule_insns_ur_0.01.test                    | 23.2539 |
| flag_bubble_data_sections_ur_0.01.test                     | 23.2617 |
| flag_bubble_vect_cost_model_ur_0.01.test                   | 23.2669 |
| flag_bubble_prefetch_loop_arrays_ur_0.01.test              | 23.2923 |
| flag_bubble_tree_pre_ur_0.01.test                          | 23.2941 |
| flag_bubble_tree_sink_ur_0.01.test                         | 23.2996 |
| flag_bubble_modulo_sched_ur_0.01.test                      |  23.371 |
| flag_bubble_float_store_ur_0.01.test                       | 23.4033 |
| flag_bubble_lto_compression_level_ur_0.01.test             | 23.4201 |
| flag_bubble_section_anchors_ur_0.01.test                   | 23.4299 |
| flag_bubble_profile_use_ur_0.01.test                       | 23.4697 |
| flag_bubble_shrink_wrap_ur_0.01.test                       | 23.4828 |
| flag_bubble_tree_loop_distribute_patterns_ur_0.01.test     | 23.4838 |
| flag_bubble_profile_generate_ur_0.01.test                  | 23.4932 |
| flag_bubble_no_ira_share_save_slots_ur_0.01.test           | 23.4943 |
| flag_bubble_rounding_math_ur_0.01.test                     | 23.4958 |
| flag_bubble_rename_registers_ur_0.01.test                  | 23.5188 |
| flag_bubble_loop_interchange_ur_0.01.test                  | 23.5271 |
| flag_bubble_tree_reassoc_ur_0.01.test                      | 23.5523 |
| flag_bubble_branch_target_load_optimize2_ur_0.01.test      | 23.6131 |
| flag_bubble_compare_elim_ur_0.01.test                      |  23.614 |
| flag_bubble_tree_loop_optimize_ur_0.01.test                | 23.6524 |
| flag_bubble_inline_small_functions_ur_0.01.test            | 23.6541 |
| flag_bubble_hoist_adjacent_loads_ur_0.01.test              | 23.6656 |
| flag_bubble_no_signed_zeros_ur_0.01.test                   | 23.7273 |
| flag_bubble_tree_copy_prop_ur_0.01.test                    | 23.8071 |
| flag_bubble_reorder_blocks_and_partition_ur_0.01.test      | 23.8225 |
| flag_bubble_strict_aliasing_ur_0.01.test                   | 23.8624 |
| flag_bubble_partial_inlining_ur_0.01.test                  | 23.8759 |
| flag_bubble_ipa_sra_ur_0.01.test                           | 23.8781 |
| flag_bubble_profile_report_ur_0.01.test                    | 23.9039 |
| flag_bubble_strict_overflow_ur_0.01.test                   | 23.9614 |
| flag_bubble_omit_frame_pointer_ur_0.01.test                | 23.9645 |
| flag_bubble_tree_loop_ivcanon_ur_0.01.test                 | 24.0094 |
| flag_bubble_delayed_branch_ur_0.01.test                    | 24.0647 |
| flag_bubble_check_data_deps_ur_0.01.test                   | 24.1526 |
| flag_bubble_function_sections_ur_0.01.test                 | 24.1773 |
| flag_bubble_no_sched_spec_ur_0.01.test                     | 24.1942 |
| flag_bubble_tree_tail_merge_ur_0.01.test                   | 24.2134 |
| flag_bubble_combine_stack_adjustments_ur_0.01.test         | 24.2628 |
| flag_bubble_if_conversion2_ur_0.01.test                    | 24.6102 |
| flag_bubble_fast_math_ur_0.01.test                         | 24.6399 |
| flag_bubble_tree_coalesce_inline_vars_ur_0.01.test         | 24.6806 |
| flag_bubble_tree_forwprop_ur_0.01.test                     | 24.7165 |
| flag_bubble_associative_math_ur_0.01.test                  | 24.7685 |
| flag_bubble_tree_fre_ur_0.01.test                          |  24.805 |

**** DONE look at the number of comparisons per successful sort
#+name: number-of-comparisons
#+begin_src sh :dir results/unreliable/ :cache yes
  GRADATIONS=(0 0.001 0.0025 0.005 0.0075 0.01 0.025 0.05 0.075 0.1 0.25 0.5 0.75 1)
  echo -e "sorter\terror\tcomparisons"
  for alg in bubble insertion merge quick;do
      for flag in Os O0 O1 O2 O3 Ofast;do
          TEST=_${alg}_c_gcc_${flag}_ur_0.test
          ERRS=$(cat $TEST|grep -v "^$"|grep -v "^r"\
              |awk '{for(i=1;i<=NF; i++){if($i < 0){total = total - $i;}else{total+=$i;}; many+=1}}
            END{print total/many}')
          CMPS=$(cat $TEST|grep "^r"|wc|awk '{print (1.0 * $3) / (1.0 * $2)}')
          echo -e "$TEST\t$ERRS\t$CMPS"
      done
  done
#+end_src

#+RESULTS[4b88e3f9b1f5da7e2622e6f7825ca49d39b5d256]: number-of-comparisons
| sorter                           | error | comparisons |
| _bubble_c_gcc_Os_ur_0.test       |     0 |     986.809 |
| _bubble_c_gcc_O0_ur_0.test       |     0 |      1000.4 |
| _bubble_c_gcc_O1_ur_0.test       |     0 |     972.206 |
| _bubble_c_gcc_O2_ur_0.test       |     0 |     972.206 |
| _bubble_c_gcc_O3_ur_0.test       |     0 |     972.206 |
| _bubble_c_gcc_Ofast_ur_0.test    |     0 |     972.206 |
| _insertion_c_gcc_Os_ur_0.test    |     0 |     314.301 |
| _insertion_c_gcc_O0_ur_0.test    |     0 |     580.766 |
| _insertion_c_gcc_O1_ur_0.test    |     0 |     563.244 |
| _insertion_c_gcc_O2_ur_0.test    |     0 |     564.251 |
| _insertion_c_gcc_O3_ur_0.test    |     0 |     564.251 |
| _insertion_c_gcc_Ofast_ur_0.test |     0 |     564.251 |
| _merge_c_gcc_Os_ur_0.test        |     0 |     400.807 |
| _merge_c_gcc_O0_ur_0.test        |     0 |     400.807 |
| _merge_c_gcc_O1_ur_0.test        |     0 |     384.291 |
| _merge_c_gcc_O2_ur_0.test        |     0 |     384.291 |
| _merge_c_gcc_O3_ur_0.test        |     0 |     384.291 |
| _merge_c_gcc_Ofast_ur_0.test     |     0 |     384.291 |
| _quick_c_gcc_Os_ur_0.test        |     0 |     234.275 |
| _quick_c_gcc_O0_ur_0.test        |     0 |     237.967 |
| _quick_c_gcc_O1_ur_0.test        |     0 |     233.267 |
| _quick_c_gcc_O2_ur_0.test        |     0 |     233.267 |
| _quick_c_gcc_O3_ur_0.test        |     0 |     233.267 |
| _quick_c_gcc_Ofast_ur_0.test     |     0 |     233.267 |

Correlation between error at 0.001 unreliability and number of
comparisons at full reliability.
#+name: unreliability-error-by-comparisons
#+header: :cache yes
#+header: :results scalar
#+begin_src bash :var success=unreliable-error-rate[,2] comparisons=number-of-comparisons
  paste <(echo "$comparisons") <(echo "$success")|cut -f3,4|tail -n +2|~/src/cla/modules/corr
#+end_src

#+RESULTS[2365ea17a3741407bf29a8c895789d42f47ecf3c]: unreliability-error-by-comparisons
: 
: 	Pearson's product-moment correlation
: 
: data:  col1 and col2
: t = 1.0078, df = 22, p-value = 0.3245
: alternative hypothesis: true correlation is not equal to 0
: 95 percent confidence interval:
:  -0.2112328  0.5655372
: sample estimates:
:       cor 
: 0.2100635 
: 

No strong correlation.
*** STARTED Specific Flag Runs
- between bubble O0 and O1
- between insertion O0 and Os

*** TODO Notable Features/Questions
- Bubble-O0 *never* fails, where as insertion-O0 fails frequently.
  What's the difference here?

- Insertion-O0 has huge error (probably due to huge failure rate).

- Generally O0 has a very different failure profile than all other
  optimization levels (aside from bubble-O0).  Especially important is
  that the insertion-Os has a much lower failure rate than insertion
  O0---indicating there's an optimization which *improves* robustness.

  In fact insertion-Os has one of the best error rates across all
  sorters and flags.

- Insertion-Os and bubble-Os both have much lower failure rates than
  their counterparts.

*** TODO look at information on segfaults
Maybe use =/lib/libSegFault.so= with =LD_PRELOAD=.

*** TODO additional runs and fixes [7/8]
- [X] make percents
- [X] include run cmps (broken out into reliable and un-reliable)
- [X] graph
- [X] fail -> error
- [X] include "wrong"
- [X] what's causing errors for non O0 optimization levels?
- [X] run for each different GCC flag -- not significantly different
      across single flags
- [ ] maybe look at all subsets of the O3 flags

** Deep Analysis of Insertion Sort
1. compiled unreliable version with
   #+begin_src sh
   ur -t -u 0.01 sorters/insertion_c.s > sorters/insertion_c_ur_0.01_t.s
   #+end_src

2. traced segfaulting unreliable traces with the following
   #+begin_src sh
   for i in {0..100};do
     test.sh -c -i -t 1 ./sorters/insertion_c_ur_0.01_t
   done 2>&1 |grep "\-139"
   #+end_src
   : rrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrurrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrurrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrurrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr-139
   : rrrrrrrrrrrrrrrurrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrurru-139
   : rrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrurrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrurrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrurrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrru-139
   : rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrurrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrru-139

3. looking deeper into the first erring trace
   : rrrrrrrrrrru
